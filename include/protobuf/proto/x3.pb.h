// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: x3.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_x3_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_x3_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_x3_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_x3_2eproto {
  static const uint32_t offsets[];
};
namespace x3 {
class Addition;
struct AdditionDefaultTypeInternal;
extern AdditionDefaultTypeInternal _Addition_default_instance_;
class Attributes;
struct AttributesDefaultTypeInternal;
extern AttributesDefaultTypeInternal _Attributes_default_instance_;
class Box;
struct BoxDefaultTypeInternal;
extern BoxDefaultTypeInternal _Box_default_instance_;
class Capability;
struct CapabilityDefaultTypeInternal;
extern CapabilityDefaultTypeInternal _Capability_default_instance_;
class Capture;
struct CaptureDefaultTypeInternal;
extern CaptureDefaultTypeInternal _Capture_default_instance_;
class CaptureFrameMessage;
struct CaptureFrameMessageDefaultTypeInternal;
extern CaptureFrameMessageDefaultTypeInternal _CaptureFrameMessage_default_instance_;
class CaptureTarget;
struct CaptureTargetDefaultTypeInternal;
extern CaptureTargetDefaultTypeInternal _CaptureTarget_default_instance_;
class CharArray;
struct CharArrayDefaultTypeInternal;
extern CharArrayDefaultTypeInternal _CharArray_default_instance_;
class Check;
struct CheckDefaultTypeInternal;
extern CheckDefaultTypeInternal _Check_default_instance_;
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class DBResult;
struct DBResultDefaultTypeInternal;
extern DBResultDefaultTypeInternal _DBResult_default_instance_;
class Enable;
struct EnableDefaultTypeInternal;
extern EnableDefaultTypeInternal _Enable_default_instance_;
class FloatArray;
struct FloatArrayDefaultTypeInternal;
extern FloatArrayDefaultTypeInternal _FloatArray_default_instance_;
class FloatMatrix;
struct FloatMatrixDefaultTypeInternal;
extern FloatMatrixDefaultTypeInternal _FloatMatrix_default_instance_;
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class FrameMessage;
struct FrameMessageDefaultTypeInternal;
extern FrameMessageDefaultTypeInternal _FrameMessage_default_instance_;
class Image;
struct ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class InfoMessage;
struct InfoMessageDefaultTypeInternal;
extern InfoMessageDefaultTypeInternal _InfoMessage_default_instance_;
class LogLevel;
struct LogLevelDefaultTypeInternal;
extern LogLevelDefaultTypeInternal _LogLevel_default_instance_;
class MessagePack;
struct MessagePackDefaultTypeInternal;
extern MessagePackDefaultTypeInternal _MessagePack_default_instance_;
class Mode;
struct ModeDefaultTypeInternal;
extern ModeDefaultTypeInternal _Mode_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Points;
struct PointsDefaultTypeInternal;
extern PointsDefaultTypeInternal _Points_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SmartFrameMessage;
struct SmartFrameMessageDefaultTypeInternal;
extern SmartFrameMessageDefaultTypeInternal _SmartFrameMessage_default_instance_;
class StatisticsMessage;
struct StatisticsMessageDefaultTypeInternal;
extern StatisticsMessageDefaultTypeInternal _StatisticsMessage_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class Target;
struct TargetDefaultTypeInternal;
extern TargetDefaultTypeInternal _Target_default_instance_;
class Threshold;
struct ThresholdDefaultTypeInternal;
extern ThresholdDefaultTypeInternal _Threshold_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace x3
PROTOBUF_NAMESPACE_OPEN
template<> ::x3::Addition* Arena::CreateMaybeMessage<::x3::Addition>(Arena*);
template<> ::x3::Attributes* Arena::CreateMaybeMessage<::x3::Attributes>(Arena*);
template<> ::x3::Box* Arena::CreateMaybeMessage<::x3::Box>(Arena*);
template<> ::x3::Capability* Arena::CreateMaybeMessage<::x3::Capability>(Arena*);
template<> ::x3::Capture* Arena::CreateMaybeMessage<::x3::Capture>(Arena*);
template<> ::x3::CaptureFrameMessage* Arena::CreateMaybeMessage<::x3::CaptureFrameMessage>(Arena*);
template<> ::x3::CaptureTarget* Arena::CreateMaybeMessage<::x3::CaptureTarget>(Arena*);
template<> ::x3::CharArray* Arena::CreateMaybeMessage<::x3::CharArray>(Arena*);
template<> ::x3::Check* Arena::CreateMaybeMessage<::x3::Check>(Arena*);
template<> ::x3::Command* Arena::CreateMaybeMessage<::x3::Command>(Arena*);
template<> ::x3::Config* Arena::CreateMaybeMessage<::x3::Config>(Arena*);
template<> ::x3::DBResult* Arena::CreateMaybeMessage<::x3::DBResult>(Arena*);
template<> ::x3::Enable* Arena::CreateMaybeMessage<::x3::Enable>(Arena*);
template<> ::x3::FloatArray* Arena::CreateMaybeMessage<::x3::FloatArray>(Arena*);
template<> ::x3::FloatMatrix* Arena::CreateMaybeMessage<::x3::FloatMatrix>(Arena*);
template<> ::x3::Frame* Arena::CreateMaybeMessage<::x3::Frame>(Arena*);
template<> ::x3::FrameMessage* Arena::CreateMaybeMessage<::x3::FrameMessage>(Arena*);
template<> ::x3::Image* Arena::CreateMaybeMessage<::x3::Image>(Arena*);
template<> ::x3::InfoMessage* Arena::CreateMaybeMessage<::x3::InfoMessage>(Arena*);
template<> ::x3::LogLevel* Arena::CreateMaybeMessage<::x3::LogLevel>(Arena*);
template<> ::x3::MessagePack* Arena::CreateMaybeMessage<::x3::MessagePack>(Arena*);
template<> ::x3::Mode* Arena::CreateMaybeMessage<::x3::Mode>(Arena*);
template<> ::x3::Point* Arena::CreateMaybeMessage<::x3::Point>(Arena*);
template<> ::x3::Points* Arena::CreateMaybeMessage<::x3::Points>(Arena*);
template<> ::x3::Response* Arena::CreateMaybeMessage<::x3::Response>(Arena*);
template<> ::x3::SmartFrameMessage* Arena::CreateMaybeMessage<::x3::SmartFrameMessage>(Arena*);
template<> ::x3::StatisticsMessage* Arena::CreateMaybeMessage<::x3::StatisticsMessage>(Arena*);
template<> ::x3::Status* Arena::CreateMaybeMessage<::x3::Status>(Arena*);
template<> ::x3::Target* Arena::CreateMaybeMessage<::x3::Target>(Arena*);
template<> ::x3::Threshold* Arena::CreateMaybeMessage<::x3::Threshold>(Arena*);
template<> ::x3::Version* Arena::CreateMaybeMessage<::x3::Version>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace x3 {

enum Status_RunStatus : int {
  Status_RunStatus_Uknown = 0,
  Status_RunStatus_Uninit = 1,
  Status_RunStatus_Init = 2,
  Status_RunStatus_Normal = 3,
  Status_RunStatus_Abnormal = 4,
  Status_RunStatus_Update = 5,
  Status_RunStatus_Status_RunStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Status_RunStatus_Status_RunStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Status_RunStatus_IsValid(int value);
constexpr Status_RunStatus Status_RunStatus_RunStatus_MIN = Status_RunStatus_Uknown;
constexpr Status_RunStatus Status_RunStatus_RunStatus_MAX = Status_RunStatus_Update;
constexpr int Status_RunStatus_RunStatus_ARRAYSIZE = Status_RunStatus_RunStatus_MAX + 1;

const std::string& Status_RunStatus_Name(Status_RunStatus value);
template<typename T>
inline const std::string& Status_RunStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_RunStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_RunStatus_Name.");
  return Status_RunStatus_Name(static_cast<Status_RunStatus>(enum_t_value));
}
bool Status_RunStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status_RunStatus* value);
enum Command_Order : int {
  Command_Order_Unkown = 0,
  Command_Order_StartX2 = 1,
  Command_Order_StopX2 = 2,
  Command_Order_UpdateX2 = 3,
  Command_Order_Command_Order_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Command_Order_Command_Order_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Command_Order_IsValid(int value);
constexpr Command_Order Command_Order_Order_MIN = Command_Order_Unkown;
constexpr Command_Order Command_Order_Order_MAX = Command_Order_UpdateX2;
constexpr int Command_Order_Order_ARRAYSIZE = Command_Order_Order_MAX + 1;

const std::string& Command_Order_Name(Command_Order value);
template<typename T>
inline const std::string& Command_Order_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Command_Order>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Command_Order_Name.");
  return Command_Order_Name(static_cast<Command_Order>(enum_t_value));
}
bool Command_Order_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Command_Order* value);
enum Response_Ack : int {
  Response_Ack_Uknown = 0,
  Response_Ack_Success = 1,
  Response_Ack_Fail = 2,
  Response_Ack_Response_Ack_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Response_Ack_Response_Ack_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Response_Ack_IsValid(int value);
constexpr Response_Ack Response_Ack_Ack_MIN = Response_Ack_Uknown;
constexpr Response_Ack Response_Ack_Ack_MAX = Response_Ack_Fail;
constexpr int Response_Ack_Ack_ARRAYSIZE = Response_Ack_Ack_MAX + 1;

const std::string& Response_Ack_Name(Response_Ack value);
template<typename T>
inline const std::string& Response_Ack_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Response_Ack>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Response_Ack_Name.");
  return Response_Ack_Name(static_cast<Response_Ack>(enum_t_value));
}
bool Response_Ack_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Response_Ack* value);
enum LogLevel_Level : int {
  LogLevel_Level_X2_DEBUG = 0,
  LogLevel_Level_X2_INFO = 1,
  LogLevel_Level_X2_NOTICE = 2,
  LogLevel_Level_X2_WARN = 3,
  LogLevel_Level_X2_ERROR = 4,
  LogLevel_Level_X2_FATAL = 5,
  LogLevel_Level_X2_NONE = 6,
  LogLevel_Level_LogLevel_Level_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LogLevel_Level_LogLevel_Level_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LogLevel_Level_IsValid(int value);
constexpr LogLevel_Level LogLevel_Level_Level_MIN = LogLevel_Level_X2_DEBUG;
constexpr LogLevel_Level LogLevel_Level_Level_MAX = LogLevel_Level_X2_NONE;
constexpr int LogLevel_Level_Level_ARRAYSIZE = LogLevel_Level_Level_MAX + 1;

const std::string& LogLevel_Level_Name(LogLevel_Level value);
template<typename T>
inline const std::string& LogLevel_Level_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogLevel_Level>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogLevel_Level_Name.");
  return LogLevel_Level_Name(static_cast<LogLevel_Level>(enum_t_value));
}
bool LogLevel_Level_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogLevel_Level* value);
enum Frame_FrameType : int {
  Frame_FrameType_Unkown = 0,
  Frame_FrameType_SmartFrame = 1,
  Frame_FrameType_DropFrame = 2,
  Frame_FrameType_ErrorFrame = 3,
  Frame_FrameType_Frame_FrameType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Frame_FrameType_Frame_FrameType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Frame_FrameType_IsValid(int value);
constexpr Frame_FrameType Frame_FrameType_FrameType_MIN = Frame_FrameType_Unkown;
constexpr Frame_FrameType Frame_FrameType_FrameType_MAX = Frame_FrameType_ErrorFrame;
constexpr int Frame_FrameType_FrameType_ARRAYSIZE = Frame_FrameType_FrameType_MAX + 1;

const std::string& Frame_FrameType_Name(Frame_FrameType value);
template<typename T>
inline const std::string& Frame_FrameType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Frame_FrameType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Frame_FrameType_Name.");
  return Frame_FrameType_Name(static_cast<Frame_FrameType>(enum_t_value));
}
bool Frame_FrameType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Frame_FrameType* value);
enum MessagePack_Flow : int {
  MessagePack_Flow_Unknown = 0,
  MessagePack_Flow_AP2CP = 1,
  MessagePack_Flow_CP2AP = 2,
  MessagePack_Flow_MessagePack_Flow_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessagePack_Flow_MessagePack_Flow_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessagePack_Flow_IsValid(int value);
constexpr MessagePack_Flow MessagePack_Flow_Flow_MIN = MessagePack_Flow_Unknown;
constexpr MessagePack_Flow MessagePack_Flow_Flow_MAX = MessagePack_Flow_CP2AP;
constexpr int MessagePack_Flow_Flow_ARRAYSIZE = MessagePack_Flow_Flow_MAX + 1;

const std::string& MessagePack_Flow_Name(MessagePack_Flow value);
template<typename T>
inline const std::string& MessagePack_Flow_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessagePack_Flow>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessagePack_Flow_Name.");
  return MessagePack_Flow_Name(static_cast<MessagePack_Flow>(enum_t_value));
}
bool MessagePack_Flow_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessagePack_Flow* value);
enum MessagePack_Type : int {
  MessagePack_Type_kUnknown = 0,
  MessagePack_Type_kXPlugin = 1,
  MessagePack_Type_kXConfig = 2,
  MessagePack_Type_MessagePack_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessagePack_Type_MessagePack_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessagePack_Type_IsValid(int value);
constexpr MessagePack_Type MessagePack_Type_Type_MIN = MessagePack_Type_kUnknown;
constexpr MessagePack_Type MessagePack_Type_Type_MAX = MessagePack_Type_kXConfig;
constexpr int MessagePack_Type_Type_ARRAYSIZE = MessagePack_Type_Type_MAX + 1;

const std::string& MessagePack_Type_Name(MessagePack_Type value);
template<typename T>
inline const std::string& MessagePack_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessagePack_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessagePack_Type_Name.");
  return MessagePack_Type_Name(static_cast<MessagePack_Type>(enum_t_value));
}
bool MessagePack_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessagePack_Type* value);
// ===================================================================

class CharArray final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.CharArray) */ {
 public:
  inline CharArray() : CharArray(nullptr) {}
  ~CharArray() override;
  explicit PROTOBUF_CONSTEXPR CharArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharArray(const CharArray& from);
  CharArray(CharArray&& from) noexcept
    : CharArray() {
    *this = ::std::move(from);
  }

  inline CharArray& operator=(const CharArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharArray& operator=(CharArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CharArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharArray* internal_default_instance() {
    return reinterpret_cast<const CharArray*>(
               &_CharArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CharArray& a, CharArray& b) {
    a.Swap(&b);
  }
  inline void Swap(CharArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharArray>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CharArray& from);
  void MergeFrom(const CharArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CharArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.CharArray";
  }
  protected:
  explicit CharArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kArrayFieldNumber = 2,
  };
  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // bytes array_ = 2;
  void clear_array_();
  const std::string& array_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_array_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_array_();
  PROTOBUF_NODISCARD std::string* release_array_();
  void set_allocated_array_(std::string* array_);
  private:
  const std::string& _internal_array_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_array_(const std::string& value);
  std::string* _internal_mutable_array_();
  public:

  // @@protoc_insertion_point(class_scope:x3.CharArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class FloatArray final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.FloatArray) */ {
 public:
  inline FloatArray() : FloatArray(nullptr) {}
  ~FloatArray() override;
  explicit PROTOBUF_CONSTEXPR FloatArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatArray(const FloatArray& from);
  FloatArray(FloatArray&& from) noexcept
    : FloatArray() {
    *this = ::std::move(from);
  }

  inline FloatArray& operator=(const FloatArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatArray& operator=(FloatArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FloatArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatArray* internal_default_instance() {
    return reinterpret_cast<const FloatArray*>(
               &_FloatArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FloatArray& a, FloatArray& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatArray>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FloatArray& from);
  void MergeFrom(const FloatArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FloatArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.FloatArray";
  }
  protected:
  explicit FloatArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated float value_ = 2;
  int value__size() const;
  private:
  int _internal_value__size() const;
  public:
  void clear_value_();
  private:
  float _internal_value_(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value_() const;
  void _internal_add_value_(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value_();
  public:
  float value_(int index) const;
  void set_value_(int index, float value);
  void add_value_(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value_();

  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // @@protoc_insertion_point(class_scope:x3.FloatArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class FloatMatrix final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.FloatMatrix) */ {
 public:
  inline FloatMatrix() : FloatMatrix(nullptr) {}
  ~FloatMatrix() override;
  explicit PROTOBUF_CONSTEXPR FloatMatrix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatMatrix(const FloatMatrix& from);
  FloatMatrix(FloatMatrix&& from) noexcept
    : FloatMatrix() {
    *this = ::std::move(from);
  }

  inline FloatMatrix& operator=(const FloatMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatMatrix& operator=(FloatMatrix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FloatMatrix& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatMatrix* internal_default_instance() {
    return reinterpret_cast<const FloatMatrix*>(
               &_FloatMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FloatMatrix& a, FloatMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatMatrix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatMatrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatMatrix>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FloatMatrix& from);
  void MergeFrom(const FloatMatrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FloatMatrix* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.FloatMatrix";
  }
  protected:
  explicit FloatMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArraysFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .x3.FloatArray arrays_ = 2;
  int arrays__size() const;
  private:
  int _internal_arrays__size() const;
  public:
  void clear_arrays_();
  ::x3::FloatArray* mutable_arrays_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatArray >*
      mutable_arrays_();
  private:
  const ::x3::FloatArray& _internal_arrays_(int index) const;
  ::x3::FloatArray* _internal_add_arrays_();
  public:
  const ::x3::FloatArray& arrays_(int index) const;
  ::x3::FloatArray* add_arrays_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatArray >&
      arrays_() const;

  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // @@protoc_insertion_point(class_scope:x3.FloatMatrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatArray > arrays__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kScoreFieldNumber = 3,
  };
  // float x_ = 1;
  void clear_x_();
  float x_() const;
  void set_x_(float value);
  private:
  float _internal_x_() const;
  void _internal_set_x_(float value);
  public:

  // float y_ = 2;
  void clear_y_();
  float y_() const;
  void set_y_(float value);
  private:
  float _internal_y_() const;
  void _internal_set_y_(float value);
  public:

  // float score_ = 3;
  void clear_score_();
  float score_() const;
  void set_score_(float value);
  private:
  float _internal_score_() const;
  void _internal_set_score_(float value);
  public:

  // @@protoc_insertion_point(class_scope:x3.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x__;
  float y__;
  float score__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Points final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Points) */ {
 public:
  inline Points() : Points(nullptr) {}
  ~Points() override;
  explicit PROTOBUF_CONSTEXPR Points(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Points(const Points& from);
  Points(Points&& from) noexcept
    : Points() {
    *this = ::std::move(from);
  }

  inline Points& operator=(const Points& from) {
    CopyFrom(from);
    return *this;
  }
  inline Points& operator=(Points&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Points& default_instance() {
    return *internal_default_instance();
  }
  static inline const Points* internal_default_instance() {
    return reinterpret_cast<const Points*>(
               &_Points_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Points& a, Points& b) {
    a.Swap(&b);
  }
  inline void Swap(Points* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Points* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Points* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Points>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Points& from);
  void MergeFrom(const Points& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Points* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Points";
  }
  protected:
  explicit Points(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .x3.Point points_ = 2;
  int points__size() const;
  private:
  int _internal_points__size() const;
  public:
  void clear_points_();
  ::x3::Point* mutable_points_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Point >*
      mutable_points_();
  private:
  const ::x3::Point& _internal_points_(int index) const;
  ::x3::Point* _internal_add_points_();
  public:
  const ::x3::Point& points_(int index) const;
  ::x3::Point* add_points_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Point >&
      points_() const;

  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // @@protoc_insertion_point(class_scope:x3.Points)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Point > points__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Box final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Box) */ {
 public:
  inline Box() : Box(nullptr) {}
  ~Box() override;
  explicit PROTOBUF_CONSTEXPR Box(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Box(const Box& from);
  Box(Box&& from) noexcept
    : Box() {
    *this = ::std::move(from);
  }

  inline Box& operator=(const Box& from) {
    CopyFrom(from);
    return *this;
  }
  inline Box& operator=(Box&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Box& default_instance() {
    return *internal_default_instance();
  }
  static inline const Box* internal_default_instance() {
    return reinterpret_cast<const Box*>(
               &_Box_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Box& a, Box& b) {
    a.Swap(&b);
  }
  inline void Swap(Box* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Box* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Box* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Box>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Box& from);
  void MergeFrom(const Box& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Box* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Box";
  }
  protected:
  explicit Box(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kTopLeftFieldNumber = 2,
    kBottomRightFieldNumber = 3,
    kScoreFieldNumber = 4,
  };
  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // .x3.Point top_left_ = 2;
  bool has_top_left_() const;
  private:
  bool _internal_has_top_left_() const;
  public:
  void clear_top_left_();
  const ::x3::Point& top_left_() const;
  PROTOBUF_NODISCARD ::x3::Point* release_top_left_();
  ::x3::Point* mutable_top_left_();
  void set_allocated_top_left_(::x3::Point* top_left_);
  private:
  const ::x3::Point& _internal_top_left_() const;
  ::x3::Point* _internal_mutable_top_left_();
  public:
  void unsafe_arena_set_allocated_top_left_(
      ::x3::Point* top_left_);
  ::x3::Point* unsafe_arena_release_top_left_();

  // .x3.Point bottom_right_ = 3;
  bool has_bottom_right_() const;
  private:
  bool _internal_has_bottom_right_() const;
  public:
  void clear_bottom_right_();
  const ::x3::Point& bottom_right_() const;
  PROTOBUF_NODISCARD ::x3::Point* release_bottom_right_();
  ::x3::Point* mutable_bottom_right_();
  void set_allocated_bottom_right_(::x3::Point* bottom_right_);
  private:
  const ::x3::Point& _internal_bottom_right_() const;
  ::x3::Point* _internal_mutable_bottom_right_();
  public:
  void unsafe_arena_set_allocated_bottom_right_(
      ::x3::Point* bottom_right_);
  ::x3::Point* unsafe_arena_release_bottom_right_();

  // float score = 4;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:x3.Box)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  ::x3::Point* top_left__;
  ::x3::Point* bottom_right__;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Attributes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Attributes) */ {
 public:
  inline Attributes() : Attributes(nullptr) {}
  ~Attributes() override;
  explicit PROTOBUF_CONSTEXPR Attributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Attributes(const Attributes& from);
  Attributes(Attributes&& from) noexcept
    : Attributes() {
    *this = ::std::move(from);
  }

  inline Attributes& operator=(const Attributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attributes& operator=(Attributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Attributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const Attributes* internal_default_instance() {
    return reinterpret_cast<const Attributes*>(
               &_Attributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Attributes& a, Attributes& b) {
    a.Swap(&b);
  }
  inline void Swap(Attributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Attributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Attributes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Attributes& from);
  void MergeFrom(const Attributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Attributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Attributes";
  }
  protected:
  explicit Attributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueStringFieldNumber = 3,
    kValueFieldNumber = 2,
    kScoreFieldNumber = 4,
  };
  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // string value_string_ = 3;
  void clear_value_string_();
  const std::string& value_string_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_string_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_string_();
  PROTOBUF_NODISCARD std::string* release_value_string_();
  void set_allocated_value_string_(std::string* value_string_);
  private:
  const std::string& _internal_value_string_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_string_(const std::string& value);
  std::string* _internal_mutable_value_string_();
  public:

  // float value_ = 2;
  void clear_value_();
  float value_() const;
  void set_value_(float value);
  private:
  float _internal_value_() const;
  void _internal_set_value_(float value);
  public:

  // float score_ = 4;
  void clear_score_();
  float score_() const;
  void set_score_(float value);
  private:
  float _internal_score_() const;
  void _internal_set_score_(float value);
  public:

  // @@protoc_insertion_point(class_scope:x3.Attributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_string__;
  float value__;
  float score__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class DBResult final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.DBResult) */ {
 public:
  inline DBResult() : DBResult(nullptr) {}
  ~DBResult() override;
  explicit PROTOBUF_CONSTEXPR DBResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBResult(const DBResult& from);
  DBResult(DBResult&& from) noexcept
    : DBResult() {
    *this = ::std::move(from);
  }

  inline DBResult& operator=(const DBResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBResult& operator=(DBResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DBResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBResult* internal_default_instance() {
    return reinterpret_cast<const DBResult*>(
               &_DBResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DBResult& a, DBResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DBResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DBResult& from);
  void MergeFrom(const DBResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DBResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.DBResult";
  }
  protected:
  explicit DBResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbTypeFieldNumber = 1,
    kMatchIdFieldNumber = 2,
    kDistanceFieldNumber = 3,
    kSimilarityFieldNumber = 4,
  };
  // string db_type_ = 1;
  void clear_db_type_();
  const std::string& db_type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_type_();
  PROTOBUF_NODISCARD std::string* release_db_type_();
  void set_allocated_db_type_(std::string* db_type_);
  private:
  const std::string& _internal_db_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_type_(const std::string& value);
  std::string* _internal_mutable_db_type_();
  public:

  // string match_id_ = 2;
  void clear_match_id_();
  const std::string& match_id_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_match_id_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_match_id_();
  PROTOBUF_NODISCARD std::string* release_match_id_();
  void set_allocated_match_id_(std::string* match_id_);
  private:
  const std::string& _internal_match_id_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_match_id_(const std::string& value);
  std::string* _internal_mutable_match_id_();
  public:

  // float distance_ = 3;
  void clear_distance_();
  float distance_() const;
  void set_distance_(float value);
  private:
  float _internal_distance_() const;
  void _internal_set_distance_(float value);
  public:

  // float similarity_ = 4;
  void clear_similarity_();
  float similarity_() const;
  void set_similarity_(float value);
  private:
  float _internal_similarity_() const;
  void _internal_set_similarity_(float value);
  public:

  // @@protoc_insertion_point(class_scope:x3.DBResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_type__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr match_id__;
  float distance__;
  float similarity__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Image final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  ~Image() override;
  explicit PROTOBUF_CONSTEXPR Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Image* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufFieldNumber = 1,
    kTypeFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // bytes buf_ = 1;
  void clear_buf_();
  const std::string& buf_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buf_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buf_();
  PROTOBUF_NODISCARD std::string* release_buf_();
  void set_allocated_buf_(std::string* buf_);
  private:
  const std::string& _internal_buf_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buf_(const std::string& value);
  std::string* _internal_mutable_buf_();
  public:

  // string type_ = 2;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // uint32 width_ = 3;
  void clear_width_();
  uint32_t width_() const;
  void set_width_(uint32_t value);
  private:
  uint32_t _internal_width_() const;
  void _internal_set_width_(uint32_t value);
  public:

  // uint32 height_ = 4;
  void clear_height_();
  uint32_t height_() const;
  void set_height_(uint32_t value);
  private:
  uint32_t _internal_height_() const;
  void _internal_set_height_(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:x3.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buf__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  uint32_t width__;
  uint32_t height__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Enable final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Enable) */ {
 public:
  inline Enable() : Enable(nullptr) {}
  ~Enable() override;
  explicit PROTOBUF_CONSTEXPR Enable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Enable(const Enable& from);
  Enable(Enable&& from) noexcept
    : Enable() {
    *this = ::std::move(from);
  }

  inline Enable& operator=(const Enable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Enable& operator=(Enable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Enable& default_instance() {
    return *internal_default_instance();
  }
  static inline const Enable* internal_default_instance() {
    return reinterpret_cast<const Enable*>(
               &_Enable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Enable& a, Enable& b) {
    a.Swap(&b);
  }
  inline void Swap(Enable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Enable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Enable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Enable>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Enable& from);
  void MergeFrom(const Enable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Enable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Enable";
  }
  protected:
  explicit Enable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // bool value_ = 2;
  void clear_value_();
  bool value_() const;
  void set_value_(bool value);
  private:
  bool _internal_value_() const;
  void _internal_set_value_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:x3.Enable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  bool value__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Threshold final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Threshold) */ {
 public:
  inline Threshold() : Threshold(nullptr) {}
  ~Threshold() override;
  explicit PROTOBUF_CONSTEXPR Threshold(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Threshold(const Threshold& from);
  Threshold(Threshold&& from) noexcept
    : Threshold() {
    *this = ::std::move(from);
  }

  inline Threshold& operator=(const Threshold& from) {
    CopyFrom(from);
    return *this;
  }
  inline Threshold& operator=(Threshold&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Threshold& default_instance() {
    return *internal_default_instance();
  }
  static inline const Threshold* internal_default_instance() {
    return reinterpret_cast<const Threshold*>(
               &_Threshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Threshold& a, Threshold& b) {
    a.Swap(&b);
  }
  inline void Swap(Threshold* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Threshold* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Threshold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Threshold>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Threshold& from);
  void MergeFrom(const Threshold& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Threshold* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Threshold";
  }
  protected:
  explicit Threshold(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // float value_ = 2;
  void clear_value_();
  float value_() const;
  void set_value_(float value);
  private:
  float _internal_value_() const;
  void _internal_set_value_(float value);
  public:

  // @@protoc_insertion_point(class_scope:x3.Threshold)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  float value__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Mode final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Mode) */ {
 public:
  inline Mode() : Mode(nullptr) {}
  ~Mode() override;
  explicit PROTOBUF_CONSTEXPR Mode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mode(const Mode& from);
  Mode(Mode&& from) noexcept
    : Mode() {
    *this = ::std::move(from);
  }

  inline Mode& operator=(const Mode& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mode& operator=(Mode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Mode& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mode* internal_default_instance() {
    return reinterpret_cast<const Mode*>(
               &_Mode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Mode& a, Mode& b) {
    a.Swap(&b);
  }
  inline void Swap(Mode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mode>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Mode& from);
  void MergeFrom(const Mode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Mode";
  }
  protected:
  explicit Mode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // string value_ = 2;
  void clear_value_();
  const std::string& value_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_();
  PROTOBUF_NODISCARD std::string* release_value_();
  void set_allocated_value_(std::string* value_);
  private:
  const std::string& _internal_value_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_(const std::string& value);
  std::string* _internal_mutable_value_();
  public:

  // @@protoc_insertion_point(class_scope:x3.Mode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Target final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Target) */ {
 public:
  inline Target() : Target(nullptr) {}
  ~Target() override;
  explicit PROTOBUF_CONSTEXPR Target(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Target(const Target& from);
  Target(Target&& from) noexcept
    : Target() {
    *this = ::std::move(from);
  }

  inline Target& operator=(const Target& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target& operator=(Target&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Target& default_instance() {
    return *internal_default_instance();
  }
  static inline const Target* internal_default_instance() {
    return reinterpret_cast<const Target*>(
               &_Target_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Target& a, Target& b) {
    a.Swap(&b);
  }
  inline void Swap(Target* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Target* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Target>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Target& from);
  void MergeFrom(const Target& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Target* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Target";
  }
  protected:
  explicit Target(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgsFieldNumber = 3,
    kSubTargetsFieldNumber = 4,
    kBoxesFieldNumber = 5,
    kAttributesFieldNumber = 6,
    kPointsFieldNumber = 7,
    kFloatArraysFieldNumber = 8,
    kFloatMatrixsFieldNumber = 9,
    kCharArraysFieldNumber = 10,
    kTypeFieldNumber = 1,
    kTrackIdFieldNumber = 2,
  };
  // repeated .x3.Image imgs_ = 3;
  int imgs__size() const;
  private:
  int _internal_imgs__size() const;
  public:
  void clear_imgs_();
  ::x3::Image* mutable_imgs_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Image >*
      mutable_imgs_();
  private:
  const ::x3::Image& _internal_imgs_(int index) const;
  ::x3::Image* _internal_add_imgs_();
  public:
  const ::x3::Image& imgs_(int index) const;
  ::x3::Image* add_imgs_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Image >&
      imgs_() const;

  // repeated .x3.Target sub_targets_ = 4;
  int sub_targets__size() const;
  private:
  int _internal_sub_targets__size() const;
  public:
  void clear_sub_targets_();
  ::x3::Target* mutable_sub_targets_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Target >*
      mutable_sub_targets_();
  private:
  const ::x3::Target& _internal_sub_targets_(int index) const;
  ::x3::Target* _internal_add_sub_targets_();
  public:
  const ::x3::Target& sub_targets_(int index) const;
  ::x3::Target* add_sub_targets_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Target >&
      sub_targets_() const;

  // repeated .x3.Box boxes_ = 5;
  int boxes__size() const;
  private:
  int _internal_boxes__size() const;
  public:
  void clear_boxes_();
  ::x3::Box* mutable_boxes_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Box >*
      mutable_boxes_();
  private:
  const ::x3::Box& _internal_boxes_(int index) const;
  ::x3::Box* _internal_add_boxes_();
  public:
  const ::x3::Box& boxes_(int index) const;
  ::x3::Box* add_boxes_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Box >&
      boxes_() const;

  // repeated .x3.Attributes attributes_ = 6;
  int attributes__size() const;
  private:
  int _internal_attributes__size() const;
  public:
  void clear_attributes_();
  ::x3::Attributes* mutable_attributes_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Attributes >*
      mutable_attributes_();
  private:
  const ::x3::Attributes& _internal_attributes_(int index) const;
  ::x3::Attributes* _internal_add_attributes_();
  public:
  const ::x3::Attributes& attributes_(int index) const;
  ::x3::Attributes* add_attributes_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Attributes >&
      attributes_() const;

  // repeated .x3.Points points_ = 7;
  int points__size() const;
  private:
  int _internal_points__size() const;
  public:
  void clear_points_();
  ::x3::Points* mutable_points_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Points >*
      mutable_points_();
  private:
  const ::x3::Points& _internal_points_(int index) const;
  ::x3::Points* _internal_add_points_();
  public:
  const ::x3::Points& points_(int index) const;
  ::x3::Points* add_points_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Points >&
      points_() const;

  // repeated .x3.FloatArray float_arrays_ = 8;
  int float_arrays__size() const;
  private:
  int _internal_float_arrays__size() const;
  public:
  void clear_float_arrays_();
  ::x3::FloatArray* mutable_float_arrays_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatArray >*
      mutable_float_arrays_();
  private:
  const ::x3::FloatArray& _internal_float_arrays_(int index) const;
  ::x3::FloatArray* _internal_add_float_arrays_();
  public:
  const ::x3::FloatArray& float_arrays_(int index) const;
  ::x3::FloatArray* add_float_arrays_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatArray >&
      float_arrays_() const;

  // repeated .x3.FloatMatrix float_matrixs_ = 9;
  int float_matrixs__size() const;
  private:
  int _internal_float_matrixs__size() const;
  public:
  void clear_float_matrixs_();
  ::x3::FloatMatrix* mutable_float_matrixs_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatMatrix >*
      mutable_float_matrixs_();
  private:
  const ::x3::FloatMatrix& _internal_float_matrixs_(int index) const;
  ::x3::FloatMatrix* _internal_add_float_matrixs_();
  public:
  const ::x3::FloatMatrix& float_matrixs_(int index) const;
  ::x3::FloatMatrix* add_float_matrixs_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatMatrix >&
      float_matrixs_() const;

  // repeated .x3.CharArray char_arrays_ = 10;
  int char_arrays__size() const;
  private:
  int _internal_char_arrays__size() const;
  public:
  void clear_char_arrays_();
  ::x3::CharArray* mutable_char_arrays_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::CharArray >*
      mutable_char_arrays_();
  private:
  const ::x3::CharArray& _internal_char_arrays_(int index) const;
  ::x3::CharArray* _internal_add_char_arrays_();
  public:
  const ::x3::CharArray& char_arrays_(int index) const;
  ::x3::CharArray* add_char_arrays_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::CharArray >&
      char_arrays_() const;

  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // uint64 track_id_ = 2;
  void clear_track_id_();
  uint64_t track_id_() const;
  void set_track_id_(uint64_t value);
  private:
  uint64_t _internal_track_id_() const;
  void _internal_set_track_id_(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:x3.Target)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Image > imgs__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Target > sub_targets__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Box > boxes__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Attributes > attributes__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Points > points__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatArray > float_arrays__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatMatrix > float_matrixs__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::CharArray > char_arrays__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  uint64_t track_id__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class SmartFrameMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.SmartFrameMessage) */ {
 public:
  inline SmartFrameMessage() : SmartFrameMessage(nullptr) {}
  ~SmartFrameMessage() override;
  explicit PROTOBUF_CONSTEXPR SmartFrameMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmartFrameMessage(const SmartFrameMessage& from);
  SmartFrameMessage(SmartFrameMessage&& from) noexcept
    : SmartFrameMessage() {
    *this = ::std::move(from);
  }

  inline SmartFrameMessage& operator=(const SmartFrameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmartFrameMessage& operator=(SmartFrameMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SmartFrameMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmartFrameMessage* internal_default_instance() {
    return reinterpret_cast<const SmartFrameMessage*>(
               &_SmartFrameMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SmartFrameMessage& a, SmartFrameMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SmartFrameMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmartFrameMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SmartFrameMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SmartFrameMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SmartFrameMessage& from);
  void MergeFrom(const SmartFrameMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmartFrameMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.SmartFrameMessage";
  }
  protected:
  explicit SmartFrameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // repeated .x3.Target targets_ = 3;
  int targets__size() const;
  private:
  int _internal_targets__size() const;
  public:
  void clear_targets_();
  ::x3::Target* mutable_targets_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Target >*
      mutable_targets_();
  private:
  const ::x3::Target& _internal_targets_(int index) const;
  ::x3::Target* _internal_add_targets_();
  public:
  const ::x3::Target& targets_(int index) const;
  ::x3::Target* add_targets_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Target >&
      targets_() const;

  // fixed64 timestamp_ = 1;
  void clear_timestamp_();
  uint64_t timestamp_() const;
  void set_timestamp_(uint64_t value);
  private:
  uint64_t _internal_timestamp_() const;
  void _internal_set_timestamp_(uint64_t value);
  public:

  // uint32 error_code_ = 2;
  void clear_error_code_();
  uint32_t error_code_() const;
  void set_error_code_(uint32_t value);
  private:
  uint32_t _internal_error_code_() const;
  void _internal_set_error_code_(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:x3.SmartFrameMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Target > targets__;
  uint64_t timestamp__;
  uint32_t error_code__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Capture final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Capture) */ {
 public:
  inline Capture() : Capture(nullptr) {}
  ~Capture() override;
  explicit PROTOBUF_CONSTEXPR Capture(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Capture(const Capture& from);
  Capture(Capture&& from) noexcept
    : Capture() {
    *this = ::std::move(from);
  }

  inline Capture& operator=(const Capture& from) {
    CopyFrom(from);
    return *this;
  }
  inline Capture& operator=(Capture&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Capture& default_instance() {
    return *internal_default_instance();
  }
  static inline const Capture* internal_default_instance() {
    return reinterpret_cast<const Capture*>(
               &_Capture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Capture& a, Capture& b) {
    a.Swap(&b);
  }
  inline void Swap(Capture* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Capture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Capture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Capture>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Capture& from);
  void MergeFrom(const Capture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Capture* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Capture";
  }
  protected:
  explicit Capture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxesFieldNumber = 4,
    kAttributesFieldNumber = 5,
    kPointsFieldNumber = 6,
    kFloatArraysFieldNumber = 7,
    kCharArraysFieldNumber = 8,
    kTypeFieldNumber = 1,
    kImgFieldNumber = 3,
    kTimestampFieldNumber = 2,
  };
  // repeated .x3.Box boxes_ = 4;
  int boxes__size() const;
  private:
  int _internal_boxes__size() const;
  public:
  void clear_boxes_();
  ::x3::Box* mutable_boxes_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Box >*
      mutable_boxes_();
  private:
  const ::x3::Box& _internal_boxes_(int index) const;
  ::x3::Box* _internal_add_boxes_();
  public:
  const ::x3::Box& boxes_(int index) const;
  ::x3::Box* add_boxes_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Box >&
      boxes_() const;

  // repeated .x3.Attributes attributes_ = 5;
  int attributes__size() const;
  private:
  int _internal_attributes__size() const;
  public:
  void clear_attributes_();
  ::x3::Attributes* mutable_attributes_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Attributes >*
      mutable_attributes_();
  private:
  const ::x3::Attributes& _internal_attributes_(int index) const;
  ::x3::Attributes* _internal_add_attributes_();
  public:
  const ::x3::Attributes& attributes_(int index) const;
  ::x3::Attributes* add_attributes_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Attributes >&
      attributes_() const;

  // repeated .x3.Points points_ = 6;
  int points__size() const;
  private:
  int _internal_points__size() const;
  public:
  void clear_points_();
  ::x3::Points* mutable_points_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Points >*
      mutable_points_();
  private:
  const ::x3::Points& _internal_points_(int index) const;
  ::x3::Points* _internal_add_points_();
  public:
  const ::x3::Points& points_(int index) const;
  ::x3::Points* add_points_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Points >&
      points_() const;

  // repeated .x3.FloatArray float_arrays_ = 7;
  int float_arrays__size() const;
  private:
  int _internal_float_arrays__size() const;
  public:
  void clear_float_arrays_();
  ::x3::FloatArray* mutable_float_arrays_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatArray >*
      mutable_float_arrays_();
  private:
  const ::x3::FloatArray& _internal_float_arrays_(int index) const;
  ::x3::FloatArray* _internal_add_float_arrays_();
  public:
  const ::x3::FloatArray& float_arrays_(int index) const;
  ::x3::FloatArray* add_float_arrays_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatArray >&
      float_arrays_() const;

  // repeated .x3.CharArray char_arrays_ = 8;
  int char_arrays__size() const;
  private:
  int _internal_char_arrays__size() const;
  public:
  void clear_char_arrays_();
  ::x3::CharArray* mutable_char_arrays_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::CharArray >*
      mutable_char_arrays_();
  private:
  const ::x3::CharArray& _internal_char_arrays_(int index) const;
  ::x3::CharArray* _internal_add_char_arrays_();
  public:
  const ::x3::CharArray& char_arrays_(int index) const;
  ::x3::CharArray* add_char_arrays_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::CharArray >&
      char_arrays_() const;

  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // .x3.Image img_ = 3;
  bool has_img_() const;
  private:
  bool _internal_has_img_() const;
  public:
  void clear_img_();
  const ::x3::Image& img_() const;
  PROTOBUF_NODISCARD ::x3::Image* release_img_();
  ::x3::Image* mutable_img_();
  void set_allocated_img_(::x3::Image* img_);
  private:
  const ::x3::Image& _internal_img_() const;
  ::x3::Image* _internal_mutable_img_();
  public:
  void unsafe_arena_set_allocated_img_(
      ::x3::Image* img_);
  ::x3::Image* unsafe_arena_release_img_();

  // fixed64 timestamp_ = 2;
  void clear_timestamp_();
  uint64_t timestamp_() const;
  void set_timestamp_(uint64_t value);
  private:
  uint64_t _internal_timestamp_() const;
  void _internal_set_timestamp_(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:x3.Capture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Box > boxes__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Attributes > attributes__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Points > points__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatArray > float_arrays__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::CharArray > char_arrays__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  ::x3::Image* img__;
  uint64_t timestamp__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class CaptureTarget final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.CaptureTarget) */ {
 public:
  inline CaptureTarget() : CaptureTarget(nullptr) {}
  ~CaptureTarget() override;
  explicit PROTOBUF_CONSTEXPR CaptureTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptureTarget(const CaptureTarget& from);
  CaptureTarget(CaptureTarget&& from) noexcept
    : CaptureTarget() {
    *this = ::std::move(from);
  }

  inline CaptureTarget& operator=(const CaptureTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptureTarget& operator=(CaptureTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CaptureTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptureTarget* internal_default_instance() {
    return reinterpret_cast<const CaptureTarget*>(
               &_CaptureTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CaptureTarget& a, CaptureTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptureTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptureTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptureTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptureTarget>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CaptureTarget& from);
  void MergeFrom(const CaptureTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CaptureTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.CaptureTarget";
  }
  protected:
  explicit CaptureTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapturesFieldNumber = 3,
    kDbResultsFieldNumber = 4,
    kTypeFieldNumber = 1,
    kTrackIdFieldNumber = 2,
  };
  // repeated .x3.Capture captures_ = 3;
  int captures__size() const;
  private:
  int _internal_captures__size() const;
  public:
  void clear_captures_();
  ::x3::Capture* mutable_captures_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Capture >*
      mutable_captures_();
  private:
  const ::x3::Capture& _internal_captures_(int index) const;
  ::x3::Capture* _internal_add_captures_();
  public:
  const ::x3::Capture& captures_(int index) const;
  ::x3::Capture* add_captures_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Capture >&
      captures_() const;

  // repeated .x3.DBResult db_results_ = 4;
  int db_results__size() const;
  private:
  int _internal_db_results__size() const;
  public:
  void clear_db_results_();
  ::x3::DBResult* mutable_db_results_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::DBResult >*
      mutable_db_results_();
  private:
  const ::x3::DBResult& _internal_db_results_(int index) const;
  ::x3::DBResult* _internal_add_db_results_();
  public:
  const ::x3::DBResult& db_results_(int index) const;
  ::x3::DBResult* add_db_results_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::DBResult >&
      db_results_() const;

  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // uint64 track_id_ = 2;
  void clear_track_id_();
  uint64_t track_id_() const;
  void set_track_id_(uint64_t value);
  private:
  uint64_t _internal_track_id_() const;
  void _internal_set_track_id_(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:x3.CaptureTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Capture > captures__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::DBResult > db_results__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  uint64_t track_id__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class CaptureFrameMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.CaptureFrameMessage) */ {
 public:
  inline CaptureFrameMessage() : CaptureFrameMessage(nullptr) {}
  ~CaptureFrameMessage() override;
  explicit PROTOBUF_CONSTEXPR CaptureFrameMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptureFrameMessage(const CaptureFrameMessage& from);
  CaptureFrameMessage(CaptureFrameMessage&& from) noexcept
    : CaptureFrameMessage() {
    *this = ::std::move(from);
  }

  inline CaptureFrameMessage& operator=(const CaptureFrameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptureFrameMessage& operator=(CaptureFrameMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CaptureFrameMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptureFrameMessage* internal_default_instance() {
    return reinterpret_cast<const CaptureFrameMessage*>(
               &_CaptureFrameMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CaptureFrameMessage& a, CaptureFrameMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptureFrameMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptureFrameMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptureFrameMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptureFrameMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CaptureFrameMessage& from);
  void MergeFrom(const CaptureFrameMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CaptureFrameMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.CaptureFrameMessage";
  }
  protected:
  explicit CaptureFrameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 1,
  };
  // repeated .x3.CaptureTarget targets_ = 1;
  int targets__size() const;
  private:
  int _internal_targets__size() const;
  public:
  void clear_targets_();
  ::x3::CaptureTarget* mutable_targets_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::CaptureTarget >*
      mutable_targets_();
  private:
  const ::x3::CaptureTarget& _internal_targets_(int index) const;
  ::x3::CaptureTarget* _internal_add_targets_();
  public:
  const ::x3::CaptureTarget& targets_(int index) const;
  ::x3::CaptureTarget* add_targets_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::CaptureTarget >&
      targets_() const;

  // @@protoc_insertion_point(class_scope:x3.CaptureFrameMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::CaptureTarget > targets__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class StatisticsMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.StatisticsMessage) */ {
 public:
  inline StatisticsMessage() : StatisticsMessage(nullptr) {}
  ~StatisticsMessage() override;
  explicit PROTOBUF_CONSTEXPR StatisticsMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatisticsMessage(const StatisticsMessage& from);
  StatisticsMessage(StatisticsMessage&& from) noexcept
    : StatisticsMessage() {
    *this = ::std::move(from);
  }

  inline StatisticsMessage& operator=(const StatisticsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticsMessage& operator=(StatisticsMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const StatisticsMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatisticsMessage* internal_default_instance() {
    return reinterpret_cast<const StatisticsMessage*>(
               &_StatisticsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StatisticsMessage& a, StatisticsMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticsMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticsMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatisticsMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatisticsMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StatisticsMessage& from);
  void MergeFrom(const StatisticsMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StatisticsMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.StatisticsMessage";
  }
  protected:
  explicit StatisticsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 1,
  };
  // repeated .x3.Attributes attributes_ = 1;
  int attributes__size() const;
  private:
  int _internal_attributes__size() const;
  public:
  void clear_attributes_();
  ::x3::Attributes* mutable_attributes_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Attributes >*
      mutable_attributes_();
  private:
  const ::x3::Attributes& _internal_attributes_(int index) const;
  ::x3::Attributes* _internal_add_attributes_();
  public:
  const ::x3::Attributes& attributes_(int index) const;
  ::x3::Attributes* add_attributes_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Attributes >&
      attributes_() const;

  // @@protoc_insertion_point(class_scope:x3.StatisticsMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Attributes > attributes__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class FrameMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.FrameMessage) */ {
 public:
  inline FrameMessage() : FrameMessage(nullptr) {}
  ~FrameMessage() override;
  explicit PROTOBUF_CONSTEXPR FrameMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameMessage(const FrameMessage& from);
  FrameMessage(FrameMessage&& from) noexcept
    : FrameMessage() {
    *this = ::std::move(from);
  }

  inline FrameMessage& operator=(const FrameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameMessage& operator=(FrameMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FrameMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameMessage* internal_default_instance() {
    return reinterpret_cast<const FrameMessage*>(
               &_FrameMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(FrameMessage& a, FrameMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FrameMessage& from);
  void MergeFrom(const FrameMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.FrameMessage";
  }
  protected:
  explicit FrameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtimgsFieldNumber = 7,
    kSmartMsgFieldNumber = 1,
    kCaptureMsgFieldNumber = 2,
    kStatisticsMsgFieldNumber = 3,
    kImgFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kSequenceIdFieldNumber = 6,
  };
  // repeated .x3.Image extimgs_ = 7;
  int extimgs__size() const;
  private:
  int _internal_extimgs__size() const;
  public:
  void clear_extimgs_();
  ::x3::Image* mutable_extimgs_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Image >*
      mutable_extimgs_();
  private:
  const ::x3::Image& _internal_extimgs_(int index) const;
  ::x3::Image* _internal_add_extimgs_();
  public:
  const ::x3::Image& extimgs_(int index) const;
  ::x3::Image* add_extimgs_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Image >&
      extimgs_() const;

  // .x3.SmartFrameMessage smart_msg_ = 1;
  bool has_smart_msg_() const;
  private:
  bool _internal_has_smart_msg_() const;
  public:
  void clear_smart_msg_();
  const ::x3::SmartFrameMessage& smart_msg_() const;
  PROTOBUF_NODISCARD ::x3::SmartFrameMessage* release_smart_msg_();
  ::x3::SmartFrameMessage* mutable_smart_msg_();
  void set_allocated_smart_msg_(::x3::SmartFrameMessage* smart_msg_);
  private:
  const ::x3::SmartFrameMessage& _internal_smart_msg_() const;
  ::x3::SmartFrameMessage* _internal_mutable_smart_msg_();
  public:
  void unsafe_arena_set_allocated_smart_msg_(
      ::x3::SmartFrameMessage* smart_msg_);
  ::x3::SmartFrameMessage* unsafe_arena_release_smart_msg_();

  // .x3.CaptureFrameMessage capture_msg_ = 2;
  bool has_capture_msg_() const;
  private:
  bool _internal_has_capture_msg_() const;
  public:
  void clear_capture_msg_();
  const ::x3::CaptureFrameMessage& capture_msg_() const;
  PROTOBUF_NODISCARD ::x3::CaptureFrameMessage* release_capture_msg_();
  ::x3::CaptureFrameMessage* mutable_capture_msg_();
  void set_allocated_capture_msg_(::x3::CaptureFrameMessage* capture_msg_);
  private:
  const ::x3::CaptureFrameMessage& _internal_capture_msg_() const;
  ::x3::CaptureFrameMessage* _internal_mutable_capture_msg_();
  public:
  void unsafe_arena_set_allocated_capture_msg_(
      ::x3::CaptureFrameMessage* capture_msg_);
  ::x3::CaptureFrameMessage* unsafe_arena_release_capture_msg_();

  // .x3.StatisticsMessage Statistics_msg_ = 3;
  bool has_statistics_msg_() const;
  private:
  bool _internal_has_statistics_msg_() const;
  public:
  void clear_statistics_msg_();
  const ::x3::StatisticsMessage& statistics_msg_() const;
  PROTOBUF_NODISCARD ::x3::StatisticsMessage* release_statistics_msg_();
  ::x3::StatisticsMessage* mutable_statistics_msg_();
  void set_allocated_statistics_msg_(::x3::StatisticsMessage* statistics_msg_);
  private:
  const ::x3::StatisticsMessage& _internal_statistics_msg_() const;
  ::x3::StatisticsMessage* _internal_mutable_statistics_msg_();
  public:
  void unsafe_arena_set_allocated_statistics_msg_(
      ::x3::StatisticsMessage* statistics_msg_);
  ::x3::StatisticsMessage* unsafe_arena_release_statistics_msg_();

  // .x3.Image img_ = 4;
  bool has_img_() const;
  private:
  bool _internal_has_img_() const;
  public:
  void clear_img_();
  const ::x3::Image& img_() const;
  PROTOBUF_NODISCARD ::x3::Image* release_img_();
  ::x3::Image* mutable_img_();
  void set_allocated_img_(::x3::Image* img_);
  private:
  const ::x3::Image& _internal_img_() const;
  ::x3::Image* _internal_mutable_img_();
  public:
  void unsafe_arena_set_allocated_img_(
      ::x3::Image* img_);
  ::x3::Image* unsafe_arena_release_img_();

  // fixed64 timestamp_ = 5;
  void clear_timestamp_();
  uint64_t timestamp_() const;
  void set_timestamp_(uint64_t value);
  private:
  uint64_t _internal_timestamp_() const;
  void _internal_set_timestamp_(uint64_t value);
  public:

  // uint64 sequence_id_ = 6;
  void clear_sequence_id_();
  uint64_t sequence_id_() const;
  void set_sequence_id_(uint64_t value);
  private:
  uint64_t _internal_sequence_id_() const;
  void _internal_set_sequence_id_(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:x3.FrameMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Image > extimgs__;
  ::x3::SmartFrameMessage* smart_msg__;
  ::x3::CaptureFrameMessage* capture_msg__;
  ::x3::StatisticsMessage* statistics_msg__;
  ::x3::Image* img__;
  uint64_t timestamp__;
  uint64_t sequence_id__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Capability final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Capability) */ {
 public:
  inline Capability() : Capability(nullptr) {}
  ~Capability() override;
  explicit PROTOBUF_CONSTEXPR Capability(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Capability(const Capability& from);
  Capability(Capability&& from) noexcept
    : Capability() {
    *this = ::std::move(from);
  }

  inline Capability& operator=(const Capability& from) {
    CopyFrom(from);
    return *this;
  }
  inline Capability& operator=(Capability&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Capability& default_instance() {
    return *internal_default_instance();
  }
  static inline const Capability* internal_default_instance() {
    return reinterpret_cast<const Capability*>(
               &_Capability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Capability& a, Capability& b) {
    a.Swap(&b);
  }
  inline void Swap(Capability* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Capability* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Capability* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Capability>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Capability& from);
  void MergeFrom(const Capability& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Capability* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Capability";
  }
  protected:
  explicit Capability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kCapArrayFieldNumber = 2,
  };
  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // .x3.Enable cap_array_ = 2;
  bool has_cap_array_() const;
  private:
  bool _internal_has_cap_array_() const;
  public:
  void clear_cap_array_();
  const ::x3::Enable& cap_array_() const;
  PROTOBUF_NODISCARD ::x3::Enable* release_cap_array_();
  ::x3::Enable* mutable_cap_array_();
  void set_allocated_cap_array_(::x3::Enable* cap_array_);
  private:
  const ::x3::Enable& _internal_cap_array_() const;
  ::x3::Enable* _internal_mutable_cap_array_();
  public:
  void unsafe_arena_set_allocated_cap_array_(
      ::x3::Enable* cap_array_);
  ::x3::Enable* unsafe_arena_release_cap_array_();

  // @@protoc_insertion_point(class_scope:x3.Capability)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  ::x3::Enable* cap_array__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Version final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  explicit PROTOBUF_CONSTEXPR Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Version& from);
  void MergeFrom(const Version& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Version* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // string value_ = 2;
  void clear_value_();
  const std::string& value_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_();
  PROTOBUF_NODISCARD std::string* release_value_();
  void set_allocated_value_(std::string* value_);
  private:
  const std::string& _internal_value_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_(const std::string& value);
  std::string* _internal_mutable_value_();
  public:

  // @@protoc_insertion_point(class_scope:x3.Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Config final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  explicit PROTOBUF_CONSTEXPR Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdFieldNumber = 2,
    kModeFieldNumber = 3,
    kShieldFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // repeated .x3.Threshold threshold_ = 2;
  int threshold__size() const;
  private:
  int _internal_threshold__size() const;
  public:
  void clear_threshold_();
  ::x3::Threshold* mutable_threshold_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Threshold >*
      mutable_threshold_();
  private:
  const ::x3::Threshold& _internal_threshold_(int index) const;
  ::x3::Threshold* _internal_add_threshold_();
  public:
  const ::x3::Threshold& threshold_(int index) const;
  ::x3::Threshold* add_threshold_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Threshold >&
      threshold_() const;

  // repeated .x3.Mode mode_ = 3;
  int mode__size() const;
  private:
  int _internal_mode__size() const;
  public:
  void clear_mode_();
  ::x3::Mode* mutable_mode_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Mode >*
      mutable_mode_();
  private:
  const ::x3::Mode& _internal_mode_(int index) const;
  ::x3::Mode* _internal_add_mode_();
  public:
  const ::x3::Mode& mode_(int index) const;
  ::x3::Mode* add_mode_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Mode >&
      mode_() const;

  // repeated .x3.Box shield_ = 4;
  int shield__size() const;
  private:
  int _internal_shield__size() const;
  public:
  void clear_shield_();
  ::x3::Box* mutable_shield_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Box >*
      mutable_shield_();
  private:
  const ::x3::Box& _internal_shield_(int index) const;
  ::x3::Box* _internal_add_shield_();
  public:
  const ::x3::Box& shield_(int index) const;
  ::x3::Box* add_shield_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Box >&
      shield_() const;

  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // @@protoc_insertion_point(class_scope:x3.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Threshold > threshold__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Mode > mode__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Box > shield__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit PROTOBUF_CONSTEXPR Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Status_RunStatus RunStatus;
  static constexpr RunStatus Uknown =
    Status_RunStatus_Uknown;
  static constexpr RunStatus Uninit =
    Status_RunStatus_Uninit;
  static constexpr RunStatus Init =
    Status_RunStatus_Init;
  static constexpr RunStatus Normal =
    Status_RunStatus_Normal;
  static constexpr RunStatus Abnormal =
    Status_RunStatus_Abnormal;
  static constexpr RunStatus Update =
    Status_RunStatus_Update;
  static inline bool RunStatus_IsValid(int value) {
    return Status_RunStatus_IsValid(value);
  }
  static constexpr RunStatus RunStatus_MIN =
    Status_RunStatus_RunStatus_MIN;
  static constexpr RunStatus RunStatus_MAX =
    Status_RunStatus_RunStatus_MAX;
  static constexpr int RunStatus_ARRAYSIZE =
    Status_RunStatus_RunStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& RunStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RunStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RunStatus_Name.");
    return Status_RunStatus_Name(enum_t_value);
  }
  static inline bool RunStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RunStatus* value) {
    return Status_RunStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kRunStatusFieldNumber = 3,
  };
  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // uint64 timestamp_ = 2;
  void clear_timestamp_();
  uint64_t timestamp_() const;
  void set_timestamp_(uint64_t value);
  private:
  uint64_t _internal_timestamp_() const;
  void _internal_set_timestamp_(uint64_t value);
  public:

  // .x3.Status.RunStatus run_status_ = 3;
  void clear_run_status_();
  ::x3::Status_RunStatus run_status_() const;
  void set_run_status_(::x3::Status_RunStatus value);
  private:
  ::x3::Status_RunStatus _internal_run_status_() const;
  void _internal_set_run_status_(::x3::Status_RunStatus value);
  public:

  // @@protoc_insertion_point(class_scope:x3.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  uint64_t timestamp__;
  int run_status__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  explicit PROTOBUF_CONSTEXPR Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Command* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Command_Order Order;
  static constexpr Order Unkown =
    Command_Order_Unkown;
  static constexpr Order StartX2 =
    Command_Order_StartX2;
  static constexpr Order StopX2 =
    Command_Order_StopX2;
  static constexpr Order UpdateX2 =
    Command_Order_UpdateX2;
  static inline bool Order_IsValid(int value) {
    return Command_Order_IsValid(value);
  }
  static constexpr Order Order_MIN =
    Command_Order_Order_MIN;
  static constexpr Order Order_MAX =
    Command_Order_Order_MAX;
  static constexpr int Order_ARRAYSIZE =
    Command_Order_Order_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Order_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Order>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Order_Name.");
    return Command_Order_Name(enum_t_value);
  }
  static inline bool Order_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Order* value) {
    return Command_Order_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kOrderFieldNumber = 3,
  };
  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // uint64 timestamp_ = 2;
  void clear_timestamp_();
  uint64_t timestamp_() const;
  void set_timestamp_(uint64_t value);
  private:
  uint64_t _internal_timestamp_() const;
  void _internal_set_timestamp_(uint64_t value);
  public:

  // .x3.Command.Order order_ = 3;
  void clear_order_();
  ::x3::Command_Order order_() const;
  void set_order_(::x3::Command_Order value);
  private:
  ::x3::Command_Order _internal_order_() const;
  void _internal_set_order_(::x3::Command_Order value);
  public:

  // @@protoc_insertion_point(class_scope:x3.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  uint64_t timestamp__;
  int order__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Response_Ack Ack;
  static constexpr Ack Uknown =
    Response_Ack_Uknown;
  static constexpr Ack Success =
    Response_Ack_Success;
  static constexpr Ack Fail =
    Response_Ack_Fail;
  static inline bool Ack_IsValid(int value) {
    return Response_Ack_IsValid(value);
  }
  static constexpr Ack Ack_MIN =
    Response_Ack_Ack_MIN;
  static constexpr Ack Ack_MAX =
    Response_Ack_Ack_MAX;
  static constexpr int Ack_ARRAYSIZE =
    Response_Ack_Ack_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Ack_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Ack>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Ack_Name.");
    return Response_Ack_Name(enum_t_value);
  }
  static inline bool Ack_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Ack* value) {
    return Response_Ack_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kAckFieldNumber = 3,
  };
  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // uint64 timestamp_ = 2;
  void clear_timestamp_();
  uint64_t timestamp_() const;
  void set_timestamp_(uint64_t value);
  private:
  uint64_t _internal_timestamp_() const;
  void _internal_set_timestamp_(uint64_t value);
  public:

  // .x3.Response.Ack ack_ = 3;
  void clear_ack_();
  ::x3::Response_Ack ack_() const;
  void set_ack_(::x3::Response_Ack value);
  private:
  ::x3::Response_Ack _internal_ack_() const;
  void _internal_set_ack_(::x3::Response_Ack value);
  public:

  // @@protoc_insertion_point(class_scope:x3.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  uint64_t timestamp__;
  int ack__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class LogLevel final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.LogLevel) */ {
 public:
  inline LogLevel() : LogLevel(nullptr) {}
  ~LogLevel() override;
  explicit PROTOBUF_CONSTEXPR LogLevel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogLevel(const LogLevel& from);
  LogLevel(LogLevel&& from) noexcept
    : LogLevel() {
    *this = ::std::move(from);
  }

  inline LogLevel& operator=(const LogLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogLevel& operator=(LogLevel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LogLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogLevel* internal_default_instance() {
    return reinterpret_cast<const LogLevel*>(
               &_LogLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(LogLevel& a, LogLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(LogLevel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogLevel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LogLevel& from);
  void MergeFrom(const LogLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogLevel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.LogLevel";
  }
  protected:
  explicit LogLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LogLevel_Level Level;
  static constexpr Level X2_DEBUG =
    LogLevel_Level_X2_DEBUG;
  static constexpr Level X2_INFO =
    LogLevel_Level_X2_INFO;
  static constexpr Level X2_NOTICE =
    LogLevel_Level_X2_NOTICE;
  static constexpr Level X2_WARN =
    LogLevel_Level_X2_WARN;
  static constexpr Level X2_ERROR =
    LogLevel_Level_X2_ERROR;
  static constexpr Level X2_FATAL =
    LogLevel_Level_X2_FATAL;
  static constexpr Level X2_NONE =
    LogLevel_Level_X2_NONE;
  static inline bool Level_IsValid(int value) {
    return LogLevel_Level_IsValid(value);
  }
  static constexpr Level Level_MIN =
    LogLevel_Level_Level_MIN;
  static constexpr Level Level_MAX =
    LogLevel_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE =
    LogLevel_Level_Level_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Level_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Level>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Level_Name.");
    return LogLevel_Level_Name(enum_t_value);
  }
  static inline bool Level_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Level* value) {
    return LogLevel_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // string type_ = 1;
  void clear_type_();
  const std::string& type_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_();
  PROTOBUF_NODISCARD std::string* release_type_();
  void set_allocated_type_(std::string* type_);
  private:
  const std::string& _internal_type_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_(const std::string& value);
  std::string* _internal_mutable_type_();
  public:

  // .x3.LogLevel.Level level_ = 2;
  void clear_level_();
  ::x3::LogLevel_Level level_() const;
  void set_level_(::x3::LogLevel_Level value);
  private:
  ::x3::LogLevel_Level _internal_level_() const;
  void _internal_set_level_(::x3::LogLevel_Level value);
  public:

  // @@protoc_insertion_point(class_scope:x3.LogLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type__;
  int level__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class InfoMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.InfoMessage) */ {
 public:
  inline InfoMessage() : InfoMessage(nullptr) {}
  ~InfoMessage() override;
  explicit PROTOBUF_CONSTEXPR InfoMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoMessage(const InfoMessage& from);
  InfoMessage(InfoMessage&& from) noexcept
    : InfoMessage() {
    *this = ::std::move(from);
  }

  inline InfoMessage& operator=(const InfoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoMessage& operator=(InfoMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const InfoMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoMessage* internal_default_instance() {
    return reinterpret_cast<const InfoMessage*>(
               &_InfoMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(InfoMessage& a, InfoMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfoMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InfoMessage& from);
  void MergeFrom(const InfoMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.InfoMessage";
  }
  protected:
  explicit InfoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 5,
    kVersionFieldNumber = 6,
    kCapabilityFieldNumber = 7,
    kStatusFieldNumber = 1,
    kCommandFieldNumber = 2,
    kLoglevelFieldNumber = 3,
    kResponseFieldNumber = 4,
  };
  // repeated .x3.Config config_ = 5;
  int config__size() const;
  private:
  int _internal_config__size() const;
  public:
  void clear_config_();
  ::x3::Config* mutable_config_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Config >*
      mutable_config_();
  private:
  const ::x3::Config& _internal_config_(int index) const;
  ::x3::Config* _internal_add_config_();
  public:
  const ::x3::Config& config_(int index) const;
  ::x3::Config* add_config_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Config >&
      config_() const;

  // repeated .x3.Version version_ = 6;
  int version__size() const;
  private:
  int _internal_version__size() const;
  public:
  void clear_version_();
  ::x3::Version* mutable_version_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Version >*
      mutable_version_();
  private:
  const ::x3::Version& _internal_version_(int index) const;
  ::x3::Version* _internal_add_version_();
  public:
  const ::x3::Version& version_(int index) const;
  ::x3::Version* add_version_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Version >&
      version_() const;

  // repeated .x3.Capability capability_ = 7;
  int capability__size() const;
  private:
  int _internal_capability__size() const;
  public:
  void clear_capability_();
  ::x3::Capability* mutable_capability_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Capability >*
      mutable_capability_();
  private:
  const ::x3::Capability& _internal_capability_(int index) const;
  ::x3::Capability* _internal_add_capability_();
  public:
  const ::x3::Capability& capability_(int index) const;
  ::x3::Capability* add_capability_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Capability >&
      capability_() const;

  // .x3.Status status_ = 1;
  bool has_status_() const;
  private:
  bool _internal_has_status_() const;
  public:
  void clear_status_();
  const ::x3::Status& status_() const;
  PROTOBUF_NODISCARD ::x3::Status* release_status_();
  ::x3::Status* mutable_status_();
  void set_allocated_status_(::x3::Status* status_);
  private:
  const ::x3::Status& _internal_status_() const;
  ::x3::Status* _internal_mutable_status_();
  public:
  void unsafe_arena_set_allocated_status_(
      ::x3::Status* status_);
  ::x3::Status* unsafe_arena_release_status_();

  // .x3.Command command_ = 2;
  bool has_command_() const;
  private:
  bool _internal_has_command_() const;
  public:
  void clear_command_();
  const ::x3::Command& command_() const;
  PROTOBUF_NODISCARD ::x3::Command* release_command_();
  ::x3::Command* mutable_command_();
  void set_allocated_command_(::x3::Command* command_);
  private:
  const ::x3::Command& _internal_command_() const;
  ::x3::Command* _internal_mutable_command_();
  public:
  void unsafe_arena_set_allocated_command_(
      ::x3::Command* command_);
  ::x3::Command* unsafe_arena_release_command_();

  // .x3.LogLevel loglevel_ = 3;
  bool has_loglevel_() const;
  private:
  bool _internal_has_loglevel_() const;
  public:
  void clear_loglevel_();
  const ::x3::LogLevel& loglevel_() const;
  PROTOBUF_NODISCARD ::x3::LogLevel* release_loglevel_();
  ::x3::LogLevel* mutable_loglevel_();
  void set_allocated_loglevel_(::x3::LogLevel* loglevel_);
  private:
  const ::x3::LogLevel& _internal_loglevel_() const;
  ::x3::LogLevel* _internal_mutable_loglevel_();
  public:
  void unsafe_arena_set_allocated_loglevel_(
      ::x3::LogLevel* loglevel_);
  ::x3::LogLevel* unsafe_arena_release_loglevel_();

  // .x3.Response response_ = 4;
  bool has_response_() const;
  private:
  bool _internal_has_response_() const;
  public:
  void clear_response_();
  const ::x3::Response& response_() const;
  PROTOBUF_NODISCARD ::x3::Response* release_response_();
  ::x3::Response* mutable_response_();
  void set_allocated_response_(::x3::Response* response_);
  private:
  const ::x3::Response& _internal_response_() const;
  ::x3::Response* _internal_mutable_response_();
  public:
  void unsafe_arena_set_allocated_response_(
      ::x3::Response* response_);
  ::x3::Response* unsafe_arena_release_response_();

  // @@protoc_insertion_point(class_scope:x3.InfoMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Config > config__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Version > version__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Capability > capability__;
  ::x3::Status* status__;
  ::x3::Command* command__;
  ::x3::LogLevel* loglevel__;
  ::x3::Response* response__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Frame final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  ~Frame() override;
  explicit PROTOBUF_CONSTEXPR Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Frame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Frame_FrameType FrameType;
  static constexpr FrameType Unkown =
    Frame_FrameType_Unkown;
  static constexpr FrameType SmartFrame =
    Frame_FrameType_SmartFrame;
  static constexpr FrameType DropFrame =
    Frame_FrameType_DropFrame;
  static constexpr FrameType ErrorFrame =
    Frame_FrameType_ErrorFrame;
  static inline bool FrameType_IsValid(int value) {
    return Frame_FrameType_IsValid(value);
  }
  static constexpr FrameType FrameType_MIN =
    Frame_FrameType_FrameType_MIN;
  static constexpr FrameType FrameType_MAX =
    Frame_FrameType_FrameType_MAX;
  static constexpr int FrameType_ARRAYSIZE =
    Frame_FrameType_FrameType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FrameType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrameType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrameType_Name.");
    return Frame_FrameType_Name(enum_t_value);
  }
  static inline bool FrameType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FrameType* value) {
    return Frame_FrameType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kFrameTypeFieldNumber = 3,
  };
  // uint64 sequence_id_ = 1;
  void clear_sequence_id_();
  uint64_t sequence_id_() const;
  void set_sequence_id_(uint64_t value);
  private:
  uint64_t _internal_sequence_id_() const;
  void _internal_set_sequence_id_(uint64_t value);
  public:

  // uint64 timestamp_ = 2;
  void clear_timestamp_();
  uint64_t timestamp_() const;
  void set_timestamp_(uint64_t value);
  private:
  uint64_t _internal_timestamp_() const;
  void _internal_set_timestamp_(uint64_t value);
  public:

  // .x3.Frame.FrameType frame_type_ = 3;
  void clear_frame_type_();
  ::x3::Frame_FrameType frame_type_() const;
  void set_frame_type_(::x3::Frame_FrameType value);
  private:
  ::x3::Frame_FrameType _internal_frame_type_() const;
  void _internal_set_frame_type_(::x3::Frame_FrameType value);
  public:

  // @@protoc_insertion_point(class_scope:x3.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t sequence_id__;
  uint64_t timestamp__;
  int frame_type__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Check final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Check) */ {
 public:
  inline Check() : Check(nullptr) {}
  ~Check() override;
  explicit PROTOBUF_CONSTEXPR Check(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Check(const Check& from);
  Check(Check&& from) noexcept
    : Check() {
    *this = ::std::move(from);
  }

  inline Check& operator=(const Check& from) {
    CopyFrom(from);
    return *this;
  }
  inline Check& operator=(Check&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Check& default_instance() {
    return *internal_default_instance();
  }
  static inline const Check* internal_default_instance() {
    return reinterpret_cast<const Check*>(
               &_Check_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Check& a, Check& b) {
    a.Swap(&b);
  }
  inline void Swap(Check* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Check* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Check* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Check>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Check& from);
  void MergeFrom(const Check& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Check* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Check";
  }
  protected:
  explicit Check(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5SumFieldNumber = 1,
  };
  // repeated bytes md5sum = 1;
  int md5sum_size() const;
  private:
  int _internal_md5sum_size() const;
  public:
  void clear_md5sum();
  const std::string& md5sum(int index) const;
  std::string* mutable_md5sum(int index);
  void set_md5sum(int index, const std::string& value);
  void set_md5sum(int index, std::string&& value);
  void set_md5sum(int index, const char* value);
  void set_md5sum(int index, const void* value, size_t size);
  std::string* add_md5sum();
  void add_md5sum(const std::string& value);
  void add_md5sum(std::string&& value);
  void add_md5sum(const char* value);
  void add_md5sum(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& md5sum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_md5sum();
  private:
  const std::string& _internal_md5sum(int index) const;
  std::string* _internal_add_md5sum();
  public:

  // @@protoc_insertion_point(class_scope:x3.Check)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> md5sum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class Addition final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.Addition) */ {
 public:
  inline Addition() : Addition(nullptr) {}
  ~Addition() override;
  explicit PROTOBUF_CONSTEXPR Addition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Addition(const Addition& from);
  Addition(Addition&& from) noexcept
    : Addition() {
    *this = ::std::move(from);
  }

  inline Addition& operator=(const Addition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Addition& operator=(Addition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Addition& default_instance() {
    return *internal_default_instance();
  }
  static inline const Addition* internal_default_instance() {
    return reinterpret_cast<const Addition*>(
               &_Addition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Addition& a, Addition& b) {
    a.Swap(&b);
  }
  inline void Swap(Addition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Addition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Addition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Addition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Addition& from);
  void MergeFrom(const Addition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Addition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.Addition";
  }
  protected:
  explicit Addition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckFieldNumber = 1,
    kFrameFieldNumber = 2,
  };
  // .x3.Check check_ = 1;
  bool has_check_() const;
  private:
  bool _internal_has_check_() const;
  public:
  void clear_check_();
  const ::x3::Check& check_() const;
  PROTOBUF_NODISCARD ::x3::Check* release_check_();
  ::x3::Check* mutable_check_();
  void set_allocated_check_(::x3::Check* check_);
  private:
  const ::x3::Check& _internal_check_() const;
  ::x3::Check* _internal_mutable_check_();
  public:
  void unsafe_arena_set_allocated_check_(
      ::x3::Check* check_);
  ::x3::Check* unsafe_arena_release_check_();

  // .x3.Frame frame_ = 2;
  bool has_frame_() const;
  private:
  bool _internal_has_frame_() const;
  public:
  void clear_frame_();
  const ::x3::Frame& frame_() const;
  PROTOBUF_NODISCARD ::x3::Frame* release_frame_();
  ::x3::Frame* mutable_frame_();
  void set_allocated_frame_(::x3::Frame* frame_);
  private:
  const ::x3::Frame& _internal_frame_() const;
  ::x3::Frame* _internal_mutable_frame_();
  public:
  void unsafe_arena_set_allocated_frame_(
      ::x3::Frame* frame_);
  ::x3::Frame* unsafe_arena_release_frame_();

  // @@protoc_insertion_point(class_scope:x3.Addition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::x3::Check* check__;
  ::x3::Frame* frame__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// -------------------------------------------------------------------

class MessagePack final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:x3.MessagePack) */ {
 public:
  inline MessagePack() : MessagePack(nullptr) {}
  ~MessagePack() override;
  explicit PROTOBUF_CONSTEXPR MessagePack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessagePack(const MessagePack& from);
  MessagePack(MessagePack&& from) noexcept
    : MessagePack() {
    *this = ::std::move(from);
  }

  inline MessagePack& operator=(const MessagePack& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessagePack& operator=(MessagePack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MessagePack& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessagePack* internal_default_instance() {
    return reinterpret_cast<const MessagePack*>(
               &_MessagePack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(MessagePack& a, MessagePack& b) {
    a.Swap(&b);
  }
  inline void Swap(MessagePack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessagePack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessagePack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessagePack>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MessagePack& from);
  void MergeFrom(const MessagePack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessagePack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x3.MessagePack";
  }
  protected:
  explicit MessagePack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MessagePack_Flow Flow;
  static constexpr Flow Unknown =
    MessagePack_Flow_Unknown;
  static constexpr Flow AP2CP =
    MessagePack_Flow_AP2CP;
  static constexpr Flow CP2AP =
    MessagePack_Flow_CP2AP;
  static inline bool Flow_IsValid(int value) {
    return MessagePack_Flow_IsValid(value);
  }
  static constexpr Flow Flow_MIN =
    MessagePack_Flow_Flow_MIN;
  static constexpr Flow Flow_MAX =
    MessagePack_Flow_Flow_MAX;
  static constexpr int Flow_ARRAYSIZE =
    MessagePack_Flow_Flow_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Flow_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Flow>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Flow_Name.");
    return MessagePack_Flow_Name(enum_t_value);
  }
  static inline bool Flow_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Flow* value) {
    return MessagePack_Flow_Parse(name, value);
  }

  typedef MessagePack_Type Type;
  static constexpr Type kUnknown =
    MessagePack_Type_kUnknown;
  static constexpr Type kXPlugin =
    MessagePack_Type_kXPlugin;
  static constexpr Type kXConfig =
    MessagePack_Type_kXConfig;
  static inline bool Type_IsValid(int value) {
    return MessagePack_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    MessagePack_Type_Type_MIN;
  static constexpr Type Type_MAX =
    MessagePack_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    MessagePack_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return MessagePack_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return MessagePack_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 4,
    kAdditionFieldNumber = 3,
    kFlowFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // bytes content_ = 4;
  void clear_content_();
  const std::string& content_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_();
  PROTOBUF_NODISCARD std::string* release_content_();
  void set_allocated_content_(std::string* content_);
  private:
  const std::string& _internal_content_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_(const std::string& value);
  std::string* _internal_mutable_content_();
  public:

  // .x3.Addition addition_ = 3;
  bool has_addition_() const;
  private:
  bool _internal_has_addition_() const;
  public:
  void clear_addition_();
  const ::x3::Addition& addition_() const;
  PROTOBUF_NODISCARD ::x3::Addition* release_addition_();
  ::x3::Addition* mutable_addition_();
  void set_allocated_addition_(::x3::Addition* addition_);
  private:
  const ::x3::Addition& _internal_addition_() const;
  ::x3::Addition* _internal_mutable_addition_();
  public:
  void unsafe_arena_set_allocated_addition_(
      ::x3::Addition* addition_);
  ::x3::Addition* unsafe_arena_release_addition_();

  // .x3.MessagePack.Flow flow_ = 1;
  void clear_flow_();
  ::x3::MessagePack_Flow flow_() const;
  void set_flow_(::x3::MessagePack_Flow value);
  private:
  ::x3::MessagePack_Flow _internal_flow_() const;
  void _internal_set_flow_(::x3::MessagePack_Flow value);
  public:

  // .x3.MessagePack.Type type_ = 2;
  void clear_type_();
  ::x3::MessagePack_Type type_() const;
  void set_type_(::x3::MessagePack_Type value);
  private:
  ::x3::MessagePack_Type _internal_type_() const;
  void _internal_set_type_(::x3::MessagePack_Type value);
  public:

  // @@protoc_insertion_point(class_scope:x3.MessagePack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content__;
  ::x3::Addition* addition__;
  int flow__;
  int type__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_x3_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CharArray

// string type_ = 1;
inline void CharArray::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& CharArray::type_() const {
  // @@protoc_insertion_point(field_get:x3.CharArray.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharArray::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.CharArray.type_)
}
inline std::string* CharArray::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.CharArray.type_)
  return _s;
}
inline const std::string& CharArray::_internal_type_() const {
  return type__.Get();
}
inline void CharArray::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* CharArray::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* CharArray::release_type_() {
  // @@protoc_insertion_point(field_release:x3.CharArray.type_)
  return type__.Release();
}
inline void CharArray::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.CharArray.type_)
}

// bytes array_ = 2;
inline void CharArray::clear_array_() {
  array__.ClearToEmpty();
}
inline const std::string& CharArray::array_() const {
  // @@protoc_insertion_point(field_get:x3.CharArray.array_)
  return _internal_array_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharArray::set_array_(ArgT0&& arg0, ArgT... args) {
 
 array__.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.CharArray.array_)
}
inline std::string* CharArray::mutable_array_() {
  std::string* _s = _internal_mutable_array_();
  // @@protoc_insertion_point(field_mutable:x3.CharArray.array_)
  return _s;
}
inline const std::string& CharArray::_internal_array_() const {
  return array__.Get();
}
inline void CharArray::_internal_set_array_(const std::string& value) {
  
  array__.Set(value, GetArenaForAllocation());
}
inline std::string* CharArray::_internal_mutable_array_() {
  
  return array__.Mutable(GetArenaForAllocation());
}
inline std::string* CharArray::release_array_() {
  // @@protoc_insertion_point(field_release:x3.CharArray.array_)
  return array__.Release();
}
inline void CharArray::set_allocated_array_(std::string* array_) {
  if (array_ != nullptr) {
    
  } else {
    
  }
  array__.SetAllocated(array_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (array__.IsDefault()) {
    array__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.CharArray.array_)
}

// -------------------------------------------------------------------

// FloatArray

// string type_ = 1;
inline void FloatArray::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& FloatArray::type_() const {
  // @@protoc_insertion_point(field_get:x3.FloatArray.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FloatArray::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.FloatArray.type_)
}
inline std::string* FloatArray::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.FloatArray.type_)
  return _s;
}
inline const std::string& FloatArray::_internal_type_() const {
  return type__.Get();
}
inline void FloatArray::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* FloatArray::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* FloatArray::release_type_() {
  // @@protoc_insertion_point(field_release:x3.FloatArray.type_)
  return type__.Release();
}
inline void FloatArray::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.FloatArray.type_)
}

// repeated float value_ = 2;
inline int FloatArray::_internal_value__size() const {
  return value__.size();
}
inline int FloatArray::value__size() const {
  return _internal_value__size();
}
inline void FloatArray::clear_value_() {
  value__.Clear();
}
inline float FloatArray::_internal_value_(int index) const {
  return value__.Get(index);
}
inline float FloatArray::value_(int index) const {
  // @@protoc_insertion_point(field_get:x3.FloatArray.value_)
  return _internal_value_(index);
}
inline void FloatArray::set_value_(int index, float value) {
  value__.Set(index, value);
  // @@protoc_insertion_point(field_set:x3.FloatArray.value_)
}
inline void FloatArray::_internal_add_value_(float value) {
  value__.Add(value);
}
inline void FloatArray::add_value_(float value) {
  _internal_add_value_(value);
  // @@protoc_insertion_point(field_add:x3.FloatArray.value_)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatArray::_internal_value_() const {
  return value__;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatArray::value_() const {
  // @@protoc_insertion_point(field_list:x3.FloatArray.value_)
  return _internal_value_();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatArray::_internal_mutable_value_() {
  return &value__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatArray::mutable_value_() {
  // @@protoc_insertion_point(field_mutable_list:x3.FloatArray.value_)
  return _internal_mutable_value_();
}

// -------------------------------------------------------------------

// FloatMatrix

// string type_ = 1;
inline void FloatMatrix::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& FloatMatrix::type_() const {
  // @@protoc_insertion_point(field_get:x3.FloatMatrix.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FloatMatrix::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.FloatMatrix.type_)
}
inline std::string* FloatMatrix::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.FloatMatrix.type_)
  return _s;
}
inline const std::string& FloatMatrix::_internal_type_() const {
  return type__.Get();
}
inline void FloatMatrix::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* FloatMatrix::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* FloatMatrix::release_type_() {
  // @@protoc_insertion_point(field_release:x3.FloatMatrix.type_)
  return type__.Release();
}
inline void FloatMatrix::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.FloatMatrix.type_)
}

// repeated .x3.FloatArray arrays_ = 2;
inline int FloatMatrix::_internal_arrays__size() const {
  return arrays__.size();
}
inline int FloatMatrix::arrays__size() const {
  return _internal_arrays__size();
}
inline void FloatMatrix::clear_arrays_() {
  arrays__.Clear();
}
inline ::x3::FloatArray* FloatMatrix::mutable_arrays_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.FloatMatrix.arrays_)
  return arrays__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatArray >*
FloatMatrix::mutable_arrays_() {
  // @@protoc_insertion_point(field_mutable_list:x3.FloatMatrix.arrays_)
  return &arrays__;
}
inline const ::x3::FloatArray& FloatMatrix::_internal_arrays_(int index) const {
  return arrays__.Get(index);
}
inline const ::x3::FloatArray& FloatMatrix::arrays_(int index) const {
  // @@protoc_insertion_point(field_get:x3.FloatMatrix.arrays_)
  return _internal_arrays_(index);
}
inline ::x3::FloatArray* FloatMatrix::_internal_add_arrays_() {
  return arrays__.Add();
}
inline ::x3::FloatArray* FloatMatrix::add_arrays_() {
  ::x3::FloatArray* _add = _internal_add_arrays_();
  // @@protoc_insertion_point(field_add:x3.FloatMatrix.arrays_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatArray >&
FloatMatrix::arrays_() const {
  // @@protoc_insertion_point(field_list:x3.FloatMatrix.arrays_)
  return arrays__;
}

// -------------------------------------------------------------------

// Point

// float x_ = 1;
inline void Point::clear_x_() {
  x__ = 0;
}
inline float Point::_internal_x_() const {
  return x__;
}
inline float Point::x_() const {
  // @@protoc_insertion_point(field_get:x3.Point.x_)
  return _internal_x_();
}
inline void Point::_internal_set_x_(float value) {
  
  x__ = value;
}
inline void Point::set_x_(float value) {
  _internal_set_x_(value);
  // @@protoc_insertion_point(field_set:x3.Point.x_)
}

// float y_ = 2;
inline void Point::clear_y_() {
  y__ = 0;
}
inline float Point::_internal_y_() const {
  return y__;
}
inline float Point::y_() const {
  // @@protoc_insertion_point(field_get:x3.Point.y_)
  return _internal_y_();
}
inline void Point::_internal_set_y_(float value) {
  
  y__ = value;
}
inline void Point::set_y_(float value) {
  _internal_set_y_(value);
  // @@protoc_insertion_point(field_set:x3.Point.y_)
}

// float score_ = 3;
inline void Point::clear_score_() {
  score__ = 0;
}
inline float Point::_internal_score_() const {
  return score__;
}
inline float Point::score_() const {
  // @@protoc_insertion_point(field_get:x3.Point.score_)
  return _internal_score_();
}
inline void Point::_internal_set_score_(float value) {
  
  score__ = value;
}
inline void Point::set_score_(float value) {
  _internal_set_score_(value);
  // @@protoc_insertion_point(field_set:x3.Point.score_)
}

// -------------------------------------------------------------------

// Points

// string type_ = 1;
inline void Points::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& Points::type_() const {
  // @@protoc_insertion_point(field_get:x3.Points.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Points::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Points.type_)
}
inline std::string* Points::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.Points.type_)
  return _s;
}
inline const std::string& Points::_internal_type_() const {
  return type__.Get();
}
inline void Points::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* Points::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* Points::release_type_() {
  // @@protoc_insertion_point(field_release:x3.Points.type_)
  return type__.Release();
}
inline void Points::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Points.type_)
}

// repeated .x3.Point points_ = 2;
inline int Points::_internal_points__size() const {
  return points__.size();
}
inline int Points::points__size() const {
  return _internal_points__size();
}
inline void Points::clear_points_() {
  points__.Clear();
}
inline ::x3::Point* Points::mutable_points_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Points.points_)
  return points__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Point >*
Points::mutable_points_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Points.points_)
  return &points__;
}
inline const ::x3::Point& Points::_internal_points_(int index) const {
  return points__.Get(index);
}
inline const ::x3::Point& Points::points_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Points.points_)
  return _internal_points_(index);
}
inline ::x3::Point* Points::_internal_add_points_() {
  return points__.Add();
}
inline ::x3::Point* Points::add_points_() {
  ::x3::Point* _add = _internal_add_points_();
  // @@protoc_insertion_point(field_add:x3.Points.points_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Point >&
Points::points_() const {
  // @@protoc_insertion_point(field_list:x3.Points.points_)
  return points__;
}

// -------------------------------------------------------------------

// Box

// string type_ = 1;
inline void Box::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& Box::type_() const {
  // @@protoc_insertion_point(field_get:x3.Box.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Box::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Box.type_)
}
inline std::string* Box::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.Box.type_)
  return _s;
}
inline const std::string& Box::_internal_type_() const {
  return type__.Get();
}
inline void Box::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* Box::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* Box::release_type_() {
  // @@protoc_insertion_point(field_release:x3.Box.type_)
  return type__.Release();
}
inline void Box::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Box.type_)
}

// .x3.Point top_left_ = 2;
inline bool Box::_internal_has_top_left_() const {
  return this != internal_default_instance() && top_left__ != nullptr;
}
inline bool Box::has_top_left_() const {
  return _internal_has_top_left_();
}
inline void Box::clear_top_left_() {
  if (GetArenaForAllocation() == nullptr && top_left__ != nullptr) {
    delete top_left__;
  }
  top_left__ = nullptr;
}
inline const ::x3::Point& Box::_internal_top_left_() const {
  const ::x3::Point* p = top_left__;
  return p != nullptr ? *p : reinterpret_cast<const ::x3::Point&>(
      ::x3::_Point_default_instance_);
}
inline const ::x3::Point& Box::top_left_() const {
  // @@protoc_insertion_point(field_get:x3.Box.top_left_)
  return _internal_top_left_();
}
inline void Box::unsafe_arena_set_allocated_top_left_(
    ::x3::Point* top_left_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_left__);
  }
  top_left__ = top_left_;
  if (top_left_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:x3.Box.top_left_)
}
inline ::x3::Point* Box::release_top_left_() {
  
  ::x3::Point* temp = top_left__;
  top_left__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::x3::Point* Box::unsafe_arena_release_top_left_() {
  // @@protoc_insertion_point(field_release:x3.Box.top_left_)
  
  ::x3::Point* temp = top_left__;
  top_left__ = nullptr;
  return temp;
}
inline ::x3::Point* Box::_internal_mutable_top_left_() {
  
  if (top_left__ == nullptr) {
    auto* p = CreateMaybeMessage<::x3::Point>(GetArenaForAllocation());
    top_left__ = p;
  }
  return top_left__;
}
inline ::x3::Point* Box::mutable_top_left_() {
  ::x3::Point* _msg = _internal_mutable_top_left_();
  // @@protoc_insertion_point(field_mutable:x3.Box.top_left_)
  return _msg;
}
inline void Box::set_allocated_top_left_(::x3::Point* top_left_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete top_left__;
  }
  if (top_left_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(top_left_);
    if (message_arena != submessage_arena) {
      top_left_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_left_, submessage_arena);
    }
    
  } else {
    
  }
  top_left__ = top_left_;
  // @@protoc_insertion_point(field_set_allocated:x3.Box.top_left_)
}

// .x3.Point bottom_right_ = 3;
inline bool Box::_internal_has_bottom_right_() const {
  return this != internal_default_instance() && bottom_right__ != nullptr;
}
inline bool Box::has_bottom_right_() const {
  return _internal_has_bottom_right_();
}
inline void Box::clear_bottom_right_() {
  if (GetArenaForAllocation() == nullptr && bottom_right__ != nullptr) {
    delete bottom_right__;
  }
  bottom_right__ = nullptr;
}
inline const ::x3::Point& Box::_internal_bottom_right_() const {
  const ::x3::Point* p = bottom_right__;
  return p != nullptr ? *p : reinterpret_cast<const ::x3::Point&>(
      ::x3::_Point_default_instance_);
}
inline const ::x3::Point& Box::bottom_right_() const {
  // @@protoc_insertion_point(field_get:x3.Box.bottom_right_)
  return _internal_bottom_right_();
}
inline void Box::unsafe_arena_set_allocated_bottom_right_(
    ::x3::Point* bottom_right_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottom_right__);
  }
  bottom_right__ = bottom_right_;
  if (bottom_right_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:x3.Box.bottom_right_)
}
inline ::x3::Point* Box::release_bottom_right_() {
  
  ::x3::Point* temp = bottom_right__;
  bottom_right__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::x3::Point* Box::unsafe_arena_release_bottom_right_() {
  // @@protoc_insertion_point(field_release:x3.Box.bottom_right_)
  
  ::x3::Point* temp = bottom_right__;
  bottom_right__ = nullptr;
  return temp;
}
inline ::x3::Point* Box::_internal_mutable_bottom_right_() {
  
  if (bottom_right__ == nullptr) {
    auto* p = CreateMaybeMessage<::x3::Point>(GetArenaForAllocation());
    bottom_right__ = p;
  }
  return bottom_right__;
}
inline ::x3::Point* Box::mutable_bottom_right_() {
  ::x3::Point* _msg = _internal_mutable_bottom_right_();
  // @@protoc_insertion_point(field_mutable:x3.Box.bottom_right_)
  return _msg;
}
inline void Box::set_allocated_bottom_right_(::x3::Point* bottom_right_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bottom_right__;
  }
  if (bottom_right_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bottom_right_);
    if (message_arena != submessage_arena) {
      bottom_right_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottom_right_, submessage_arena);
    }
    
  } else {
    
  }
  bottom_right__ = bottom_right_;
  // @@protoc_insertion_point(field_set_allocated:x3.Box.bottom_right_)
}

// float score = 4;
inline void Box::clear_score() {
  score_ = 0;
}
inline float Box::_internal_score() const {
  return score_;
}
inline float Box::score() const {
  // @@protoc_insertion_point(field_get:x3.Box.score)
  return _internal_score();
}
inline void Box::_internal_set_score(float value) {
  
  score_ = value;
}
inline void Box::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:x3.Box.score)
}

// -------------------------------------------------------------------

// Attributes

// string type_ = 1;
inline void Attributes::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& Attributes::type_() const {
  // @@protoc_insertion_point(field_get:x3.Attributes.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Attributes::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Attributes.type_)
}
inline std::string* Attributes::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.Attributes.type_)
  return _s;
}
inline const std::string& Attributes::_internal_type_() const {
  return type__.Get();
}
inline void Attributes::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* Attributes::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* Attributes::release_type_() {
  // @@protoc_insertion_point(field_release:x3.Attributes.type_)
  return type__.Release();
}
inline void Attributes::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Attributes.type_)
}

// float value_ = 2;
inline void Attributes::clear_value_() {
  value__ = 0;
}
inline float Attributes::_internal_value_() const {
  return value__;
}
inline float Attributes::value_() const {
  // @@protoc_insertion_point(field_get:x3.Attributes.value_)
  return _internal_value_();
}
inline void Attributes::_internal_set_value_(float value) {
  
  value__ = value;
}
inline void Attributes::set_value_(float value) {
  _internal_set_value_(value);
  // @@protoc_insertion_point(field_set:x3.Attributes.value_)
}

// string value_string_ = 3;
inline void Attributes::clear_value_string_() {
  value_string__.ClearToEmpty();
}
inline const std::string& Attributes::value_string_() const {
  // @@protoc_insertion_point(field_get:x3.Attributes.value_string_)
  return _internal_value_string_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Attributes::set_value_string_(ArgT0&& arg0, ArgT... args) {
 
 value_string__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Attributes.value_string_)
}
inline std::string* Attributes::mutable_value_string_() {
  std::string* _s = _internal_mutable_value_string_();
  // @@protoc_insertion_point(field_mutable:x3.Attributes.value_string_)
  return _s;
}
inline const std::string& Attributes::_internal_value_string_() const {
  return value_string__.Get();
}
inline void Attributes::_internal_set_value_string_(const std::string& value) {
  
  value_string__.Set(value, GetArenaForAllocation());
}
inline std::string* Attributes::_internal_mutable_value_string_() {
  
  return value_string__.Mutable(GetArenaForAllocation());
}
inline std::string* Attributes::release_value_string_() {
  // @@protoc_insertion_point(field_release:x3.Attributes.value_string_)
  return value_string__.Release();
}
inline void Attributes::set_allocated_value_string_(std::string* value_string_) {
  if (value_string_ != nullptr) {
    
  } else {
    
  }
  value_string__.SetAllocated(value_string_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_string__.IsDefault()) {
    value_string__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Attributes.value_string_)
}

// float score_ = 4;
inline void Attributes::clear_score_() {
  score__ = 0;
}
inline float Attributes::_internal_score_() const {
  return score__;
}
inline float Attributes::score_() const {
  // @@protoc_insertion_point(field_get:x3.Attributes.score_)
  return _internal_score_();
}
inline void Attributes::_internal_set_score_(float value) {
  
  score__ = value;
}
inline void Attributes::set_score_(float value) {
  _internal_set_score_(value);
  // @@protoc_insertion_point(field_set:x3.Attributes.score_)
}

// -------------------------------------------------------------------

// DBResult

// string db_type_ = 1;
inline void DBResult::clear_db_type_() {
  db_type__.ClearToEmpty();
}
inline const std::string& DBResult::db_type_() const {
  // @@protoc_insertion_point(field_get:x3.DBResult.db_type_)
  return _internal_db_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBResult::set_db_type_(ArgT0&& arg0, ArgT... args) {
 
 db_type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.DBResult.db_type_)
}
inline std::string* DBResult::mutable_db_type_() {
  std::string* _s = _internal_mutable_db_type_();
  // @@protoc_insertion_point(field_mutable:x3.DBResult.db_type_)
  return _s;
}
inline const std::string& DBResult::_internal_db_type_() const {
  return db_type__.Get();
}
inline void DBResult::_internal_set_db_type_(const std::string& value) {
  
  db_type__.Set(value, GetArenaForAllocation());
}
inline std::string* DBResult::_internal_mutable_db_type_() {
  
  return db_type__.Mutable(GetArenaForAllocation());
}
inline std::string* DBResult::release_db_type_() {
  // @@protoc_insertion_point(field_release:x3.DBResult.db_type_)
  return db_type__.Release();
}
inline void DBResult::set_allocated_db_type_(std::string* db_type_) {
  if (db_type_ != nullptr) {
    
  } else {
    
  }
  db_type__.SetAllocated(db_type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (db_type__.IsDefault()) {
    db_type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.DBResult.db_type_)
}

// string match_id_ = 2;
inline void DBResult::clear_match_id_() {
  match_id__.ClearToEmpty();
}
inline const std::string& DBResult::match_id_() const {
  // @@protoc_insertion_point(field_get:x3.DBResult.match_id_)
  return _internal_match_id_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBResult::set_match_id_(ArgT0&& arg0, ArgT... args) {
 
 match_id__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.DBResult.match_id_)
}
inline std::string* DBResult::mutable_match_id_() {
  std::string* _s = _internal_mutable_match_id_();
  // @@protoc_insertion_point(field_mutable:x3.DBResult.match_id_)
  return _s;
}
inline const std::string& DBResult::_internal_match_id_() const {
  return match_id__.Get();
}
inline void DBResult::_internal_set_match_id_(const std::string& value) {
  
  match_id__.Set(value, GetArenaForAllocation());
}
inline std::string* DBResult::_internal_mutable_match_id_() {
  
  return match_id__.Mutable(GetArenaForAllocation());
}
inline std::string* DBResult::release_match_id_() {
  // @@protoc_insertion_point(field_release:x3.DBResult.match_id_)
  return match_id__.Release();
}
inline void DBResult::set_allocated_match_id_(std::string* match_id_) {
  if (match_id_ != nullptr) {
    
  } else {
    
  }
  match_id__.SetAllocated(match_id_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (match_id__.IsDefault()) {
    match_id__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.DBResult.match_id_)
}

// float distance_ = 3;
inline void DBResult::clear_distance_() {
  distance__ = 0;
}
inline float DBResult::_internal_distance_() const {
  return distance__;
}
inline float DBResult::distance_() const {
  // @@protoc_insertion_point(field_get:x3.DBResult.distance_)
  return _internal_distance_();
}
inline void DBResult::_internal_set_distance_(float value) {
  
  distance__ = value;
}
inline void DBResult::set_distance_(float value) {
  _internal_set_distance_(value);
  // @@protoc_insertion_point(field_set:x3.DBResult.distance_)
}

// float similarity_ = 4;
inline void DBResult::clear_similarity_() {
  similarity__ = 0;
}
inline float DBResult::_internal_similarity_() const {
  return similarity__;
}
inline float DBResult::similarity_() const {
  // @@protoc_insertion_point(field_get:x3.DBResult.similarity_)
  return _internal_similarity_();
}
inline void DBResult::_internal_set_similarity_(float value) {
  
  similarity__ = value;
}
inline void DBResult::set_similarity_(float value) {
  _internal_set_similarity_(value);
  // @@protoc_insertion_point(field_set:x3.DBResult.similarity_)
}

// -------------------------------------------------------------------

// Image

// bytes buf_ = 1;
inline void Image::clear_buf_() {
  buf__.ClearToEmpty();
}
inline const std::string& Image::buf_() const {
  // @@protoc_insertion_point(field_get:x3.Image.buf_)
  return _internal_buf_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Image::set_buf_(ArgT0&& arg0, ArgT... args) {
 
 buf__.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Image.buf_)
}
inline std::string* Image::mutable_buf_() {
  std::string* _s = _internal_mutable_buf_();
  // @@protoc_insertion_point(field_mutable:x3.Image.buf_)
  return _s;
}
inline const std::string& Image::_internal_buf_() const {
  return buf__.Get();
}
inline void Image::_internal_set_buf_(const std::string& value) {
  
  buf__.Set(value, GetArenaForAllocation());
}
inline std::string* Image::_internal_mutable_buf_() {
  
  return buf__.Mutable(GetArenaForAllocation());
}
inline std::string* Image::release_buf_() {
  // @@protoc_insertion_point(field_release:x3.Image.buf_)
  return buf__.Release();
}
inline void Image::set_allocated_buf_(std::string* buf_) {
  if (buf_ != nullptr) {
    
  } else {
    
  }
  buf__.SetAllocated(buf_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (buf__.IsDefault()) {
    buf__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Image.buf_)
}

// string type_ = 2;
inline void Image::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& Image::type_() const {
  // @@protoc_insertion_point(field_get:x3.Image.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Image::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Image.type_)
}
inline std::string* Image::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.Image.type_)
  return _s;
}
inline const std::string& Image::_internal_type_() const {
  return type__.Get();
}
inline void Image::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* Image::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* Image::release_type_() {
  // @@protoc_insertion_point(field_release:x3.Image.type_)
  return type__.Release();
}
inline void Image::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Image.type_)
}

// uint32 width_ = 3;
inline void Image::clear_width_() {
  width__ = 0u;
}
inline uint32_t Image::_internal_width_() const {
  return width__;
}
inline uint32_t Image::width_() const {
  // @@protoc_insertion_point(field_get:x3.Image.width_)
  return _internal_width_();
}
inline void Image::_internal_set_width_(uint32_t value) {
  
  width__ = value;
}
inline void Image::set_width_(uint32_t value) {
  _internal_set_width_(value);
  // @@protoc_insertion_point(field_set:x3.Image.width_)
}

// uint32 height_ = 4;
inline void Image::clear_height_() {
  height__ = 0u;
}
inline uint32_t Image::_internal_height_() const {
  return height__;
}
inline uint32_t Image::height_() const {
  // @@protoc_insertion_point(field_get:x3.Image.height_)
  return _internal_height_();
}
inline void Image::_internal_set_height_(uint32_t value) {
  
  height__ = value;
}
inline void Image::set_height_(uint32_t value) {
  _internal_set_height_(value);
  // @@protoc_insertion_point(field_set:x3.Image.height_)
}

// -------------------------------------------------------------------

// Enable

// string type_ = 1;
inline void Enable::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& Enable::type_() const {
  // @@protoc_insertion_point(field_get:x3.Enable.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Enable::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Enable.type_)
}
inline std::string* Enable::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.Enable.type_)
  return _s;
}
inline const std::string& Enable::_internal_type_() const {
  return type__.Get();
}
inline void Enable::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* Enable::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* Enable::release_type_() {
  // @@protoc_insertion_point(field_release:x3.Enable.type_)
  return type__.Release();
}
inline void Enable::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Enable.type_)
}

// bool value_ = 2;
inline void Enable::clear_value_() {
  value__ = false;
}
inline bool Enable::_internal_value_() const {
  return value__;
}
inline bool Enable::value_() const {
  // @@protoc_insertion_point(field_get:x3.Enable.value_)
  return _internal_value_();
}
inline void Enable::_internal_set_value_(bool value) {
  
  value__ = value;
}
inline void Enable::set_value_(bool value) {
  _internal_set_value_(value);
  // @@protoc_insertion_point(field_set:x3.Enable.value_)
}

// -------------------------------------------------------------------

// Threshold

// string type_ = 1;
inline void Threshold::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& Threshold::type_() const {
  // @@protoc_insertion_point(field_get:x3.Threshold.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Threshold::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Threshold.type_)
}
inline std::string* Threshold::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.Threshold.type_)
  return _s;
}
inline const std::string& Threshold::_internal_type_() const {
  return type__.Get();
}
inline void Threshold::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* Threshold::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* Threshold::release_type_() {
  // @@protoc_insertion_point(field_release:x3.Threshold.type_)
  return type__.Release();
}
inline void Threshold::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Threshold.type_)
}

// float value_ = 2;
inline void Threshold::clear_value_() {
  value__ = 0;
}
inline float Threshold::_internal_value_() const {
  return value__;
}
inline float Threshold::value_() const {
  // @@protoc_insertion_point(field_get:x3.Threshold.value_)
  return _internal_value_();
}
inline void Threshold::_internal_set_value_(float value) {
  
  value__ = value;
}
inline void Threshold::set_value_(float value) {
  _internal_set_value_(value);
  // @@protoc_insertion_point(field_set:x3.Threshold.value_)
}

// -------------------------------------------------------------------

// Mode

// string type_ = 1;
inline void Mode::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& Mode::type_() const {
  // @@protoc_insertion_point(field_get:x3.Mode.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mode::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Mode.type_)
}
inline std::string* Mode::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.Mode.type_)
  return _s;
}
inline const std::string& Mode::_internal_type_() const {
  return type__.Get();
}
inline void Mode::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* Mode::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* Mode::release_type_() {
  // @@protoc_insertion_point(field_release:x3.Mode.type_)
  return type__.Release();
}
inline void Mode::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Mode.type_)
}

// string value_ = 2;
inline void Mode::clear_value_() {
  value__.ClearToEmpty();
}
inline const std::string& Mode::value_() const {
  // @@protoc_insertion_point(field_get:x3.Mode.value_)
  return _internal_value_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mode::set_value_(ArgT0&& arg0, ArgT... args) {
 
 value__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Mode.value_)
}
inline std::string* Mode::mutable_value_() {
  std::string* _s = _internal_mutable_value_();
  // @@protoc_insertion_point(field_mutable:x3.Mode.value_)
  return _s;
}
inline const std::string& Mode::_internal_value_() const {
  return value__.Get();
}
inline void Mode::_internal_set_value_(const std::string& value) {
  
  value__.Set(value, GetArenaForAllocation());
}
inline std::string* Mode::_internal_mutable_value_() {
  
  return value__.Mutable(GetArenaForAllocation());
}
inline std::string* Mode::release_value_() {
  // @@protoc_insertion_point(field_release:x3.Mode.value_)
  return value__.Release();
}
inline void Mode::set_allocated_value_(std::string* value_) {
  if (value_ != nullptr) {
    
  } else {
    
  }
  value__.SetAllocated(value_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value__.IsDefault()) {
    value__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Mode.value_)
}

// -------------------------------------------------------------------

// Target

// string type_ = 1;
inline void Target::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& Target::type_() const {
  // @@protoc_insertion_point(field_get:x3.Target.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Target::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Target.type_)
}
inline std::string* Target::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.Target.type_)
  return _s;
}
inline const std::string& Target::_internal_type_() const {
  return type__.Get();
}
inline void Target::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* Target::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* Target::release_type_() {
  // @@protoc_insertion_point(field_release:x3.Target.type_)
  return type__.Release();
}
inline void Target::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Target.type_)
}

// uint64 track_id_ = 2;
inline void Target::clear_track_id_() {
  track_id__ = uint64_t{0u};
}
inline uint64_t Target::_internal_track_id_() const {
  return track_id__;
}
inline uint64_t Target::track_id_() const {
  // @@protoc_insertion_point(field_get:x3.Target.track_id_)
  return _internal_track_id_();
}
inline void Target::_internal_set_track_id_(uint64_t value) {
  
  track_id__ = value;
}
inline void Target::set_track_id_(uint64_t value) {
  _internal_set_track_id_(value);
  // @@protoc_insertion_point(field_set:x3.Target.track_id_)
}

// repeated .x3.Image imgs_ = 3;
inline int Target::_internal_imgs__size() const {
  return imgs__.size();
}
inline int Target::imgs__size() const {
  return _internal_imgs__size();
}
inline void Target::clear_imgs_() {
  imgs__.Clear();
}
inline ::x3::Image* Target::mutable_imgs_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Target.imgs_)
  return imgs__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Image >*
Target::mutable_imgs_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Target.imgs_)
  return &imgs__;
}
inline const ::x3::Image& Target::_internal_imgs_(int index) const {
  return imgs__.Get(index);
}
inline const ::x3::Image& Target::imgs_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Target.imgs_)
  return _internal_imgs_(index);
}
inline ::x3::Image* Target::_internal_add_imgs_() {
  return imgs__.Add();
}
inline ::x3::Image* Target::add_imgs_() {
  ::x3::Image* _add = _internal_add_imgs_();
  // @@protoc_insertion_point(field_add:x3.Target.imgs_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Image >&
Target::imgs_() const {
  // @@protoc_insertion_point(field_list:x3.Target.imgs_)
  return imgs__;
}

// repeated .x3.Target sub_targets_ = 4;
inline int Target::_internal_sub_targets__size() const {
  return sub_targets__.size();
}
inline int Target::sub_targets__size() const {
  return _internal_sub_targets__size();
}
inline void Target::clear_sub_targets_() {
  sub_targets__.Clear();
}
inline ::x3::Target* Target::mutable_sub_targets_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Target.sub_targets_)
  return sub_targets__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Target >*
Target::mutable_sub_targets_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Target.sub_targets_)
  return &sub_targets__;
}
inline const ::x3::Target& Target::_internal_sub_targets_(int index) const {
  return sub_targets__.Get(index);
}
inline const ::x3::Target& Target::sub_targets_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Target.sub_targets_)
  return _internal_sub_targets_(index);
}
inline ::x3::Target* Target::_internal_add_sub_targets_() {
  return sub_targets__.Add();
}
inline ::x3::Target* Target::add_sub_targets_() {
  ::x3::Target* _add = _internal_add_sub_targets_();
  // @@protoc_insertion_point(field_add:x3.Target.sub_targets_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Target >&
Target::sub_targets_() const {
  // @@protoc_insertion_point(field_list:x3.Target.sub_targets_)
  return sub_targets__;
}

// repeated .x3.Box boxes_ = 5;
inline int Target::_internal_boxes__size() const {
  return boxes__.size();
}
inline int Target::boxes__size() const {
  return _internal_boxes__size();
}
inline void Target::clear_boxes_() {
  boxes__.Clear();
}
inline ::x3::Box* Target::mutable_boxes_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Target.boxes_)
  return boxes__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Box >*
Target::mutable_boxes_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Target.boxes_)
  return &boxes__;
}
inline const ::x3::Box& Target::_internal_boxes_(int index) const {
  return boxes__.Get(index);
}
inline const ::x3::Box& Target::boxes_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Target.boxes_)
  return _internal_boxes_(index);
}
inline ::x3::Box* Target::_internal_add_boxes_() {
  return boxes__.Add();
}
inline ::x3::Box* Target::add_boxes_() {
  ::x3::Box* _add = _internal_add_boxes_();
  // @@protoc_insertion_point(field_add:x3.Target.boxes_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Box >&
Target::boxes_() const {
  // @@protoc_insertion_point(field_list:x3.Target.boxes_)
  return boxes__;
}

// repeated .x3.Attributes attributes_ = 6;
inline int Target::_internal_attributes__size() const {
  return attributes__.size();
}
inline int Target::attributes__size() const {
  return _internal_attributes__size();
}
inline void Target::clear_attributes_() {
  attributes__.Clear();
}
inline ::x3::Attributes* Target::mutable_attributes_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Target.attributes_)
  return attributes__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Attributes >*
Target::mutable_attributes_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Target.attributes_)
  return &attributes__;
}
inline const ::x3::Attributes& Target::_internal_attributes_(int index) const {
  return attributes__.Get(index);
}
inline const ::x3::Attributes& Target::attributes_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Target.attributes_)
  return _internal_attributes_(index);
}
inline ::x3::Attributes* Target::_internal_add_attributes_() {
  return attributes__.Add();
}
inline ::x3::Attributes* Target::add_attributes_() {
  ::x3::Attributes* _add = _internal_add_attributes_();
  // @@protoc_insertion_point(field_add:x3.Target.attributes_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Attributes >&
Target::attributes_() const {
  // @@protoc_insertion_point(field_list:x3.Target.attributes_)
  return attributes__;
}

// repeated .x3.Points points_ = 7;
inline int Target::_internal_points__size() const {
  return points__.size();
}
inline int Target::points__size() const {
  return _internal_points__size();
}
inline void Target::clear_points_() {
  points__.Clear();
}
inline ::x3::Points* Target::mutable_points_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Target.points_)
  return points__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Points >*
Target::mutable_points_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Target.points_)
  return &points__;
}
inline const ::x3::Points& Target::_internal_points_(int index) const {
  return points__.Get(index);
}
inline const ::x3::Points& Target::points_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Target.points_)
  return _internal_points_(index);
}
inline ::x3::Points* Target::_internal_add_points_() {
  return points__.Add();
}
inline ::x3::Points* Target::add_points_() {
  ::x3::Points* _add = _internal_add_points_();
  // @@protoc_insertion_point(field_add:x3.Target.points_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Points >&
Target::points_() const {
  // @@protoc_insertion_point(field_list:x3.Target.points_)
  return points__;
}

// repeated .x3.FloatArray float_arrays_ = 8;
inline int Target::_internal_float_arrays__size() const {
  return float_arrays__.size();
}
inline int Target::float_arrays__size() const {
  return _internal_float_arrays__size();
}
inline void Target::clear_float_arrays_() {
  float_arrays__.Clear();
}
inline ::x3::FloatArray* Target::mutable_float_arrays_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Target.float_arrays_)
  return float_arrays__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatArray >*
Target::mutable_float_arrays_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Target.float_arrays_)
  return &float_arrays__;
}
inline const ::x3::FloatArray& Target::_internal_float_arrays_(int index) const {
  return float_arrays__.Get(index);
}
inline const ::x3::FloatArray& Target::float_arrays_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Target.float_arrays_)
  return _internal_float_arrays_(index);
}
inline ::x3::FloatArray* Target::_internal_add_float_arrays_() {
  return float_arrays__.Add();
}
inline ::x3::FloatArray* Target::add_float_arrays_() {
  ::x3::FloatArray* _add = _internal_add_float_arrays_();
  // @@protoc_insertion_point(field_add:x3.Target.float_arrays_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatArray >&
Target::float_arrays_() const {
  // @@protoc_insertion_point(field_list:x3.Target.float_arrays_)
  return float_arrays__;
}

// repeated .x3.FloatMatrix float_matrixs_ = 9;
inline int Target::_internal_float_matrixs__size() const {
  return float_matrixs__.size();
}
inline int Target::float_matrixs__size() const {
  return _internal_float_matrixs__size();
}
inline void Target::clear_float_matrixs_() {
  float_matrixs__.Clear();
}
inline ::x3::FloatMatrix* Target::mutable_float_matrixs_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Target.float_matrixs_)
  return float_matrixs__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatMatrix >*
Target::mutable_float_matrixs_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Target.float_matrixs_)
  return &float_matrixs__;
}
inline const ::x3::FloatMatrix& Target::_internal_float_matrixs_(int index) const {
  return float_matrixs__.Get(index);
}
inline const ::x3::FloatMatrix& Target::float_matrixs_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Target.float_matrixs_)
  return _internal_float_matrixs_(index);
}
inline ::x3::FloatMatrix* Target::_internal_add_float_matrixs_() {
  return float_matrixs__.Add();
}
inline ::x3::FloatMatrix* Target::add_float_matrixs_() {
  ::x3::FloatMatrix* _add = _internal_add_float_matrixs_();
  // @@protoc_insertion_point(field_add:x3.Target.float_matrixs_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatMatrix >&
Target::float_matrixs_() const {
  // @@protoc_insertion_point(field_list:x3.Target.float_matrixs_)
  return float_matrixs__;
}

// repeated .x3.CharArray char_arrays_ = 10;
inline int Target::_internal_char_arrays__size() const {
  return char_arrays__.size();
}
inline int Target::char_arrays__size() const {
  return _internal_char_arrays__size();
}
inline void Target::clear_char_arrays_() {
  char_arrays__.Clear();
}
inline ::x3::CharArray* Target::mutable_char_arrays_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Target.char_arrays_)
  return char_arrays__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::CharArray >*
Target::mutable_char_arrays_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Target.char_arrays_)
  return &char_arrays__;
}
inline const ::x3::CharArray& Target::_internal_char_arrays_(int index) const {
  return char_arrays__.Get(index);
}
inline const ::x3::CharArray& Target::char_arrays_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Target.char_arrays_)
  return _internal_char_arrays_(index);
}
inline ::x3::CharArray* Target::_internal_add_char_arrays_() {
  return char_arrays__.Add();
}
inline ::x3::CharArray* Target::add_char_arrays_() {
  ::x3::CharArray* _add = _internal_add_char_arrays_();
  // @@protoc_insertion_point(field_add:x3.Target.char_arrays_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::CharArray >&
Target::char_arrays_() const {
  // @@protoc_insertion_point(field_list:x3.Target.char_arrays_)
  return char_arrays__;
}

// -------------------------------------------------------------------

// SmartFrameMessage

// fixed64 timestamp_ = 1;
inline void SmartFrameMessage::clear_timestamp_() {
  timestamp__ = uint64_t{0u};
}
inline uint64_t SmartFrameMessage::_internal_timestamp_() const {
  return timestamp__;
}
inline uint64_t SmartFrameMessage::timestamp_() const {
  // @@protoc_insertion_point(field_get:x3.SmartFrameMessage.timestamp_)
  return _internal_timestamp_();
}
inline void SmartFrameMessage::_internal_set_timestamp_(uint64_t value) {
  
  timestamp__ = value;
}
inline void SmartFrameMessage::set_timestamp_(uint64_t value) {
  _internal_set_timestamp_(value);
  // @@protoc_insertion_point(field_set:x3.SmartFrameMessage.timestamp_)
}

// uint32 error_code_ = 2;
inline void SmartFrameMessage::clear_error_code_() {
  error_code__ = 0u;
}
inline uint32_t SmartFrameMessage::_internal_error_code_() const {
  return error_code__;
}
inline uint32_t SmartFrameMessage::error_code_() const {
  // @@protoc_insertion_point(field_get:x3.SmartFrameMessage.error_code_)
  return _internal_error_code_();
}
inline void SmartFrameMessage::_internal_set_error_code_(uint32_t value) {
  
  error_code__ = value;
}
inline void SmartFrameMessage::set_error_code_(uint32_t value) {
  _internal_set_error_code_(value);
  // @@protoc_insertion_point(field_set:x3.SmartFrameMessage.error_code_)
}

// repeated .x3.Target targets_ = 3;
inline int SmartFrameMessage::_internal_targets__size() const {
  return targets__.size();
}
inline int SmartFrameMessage::targets__size() const {
  return _internal_targets__size();
}
inline void SmartFrameMessage::clear_targets_() {
  targets__.Clear();
}
inline ::x3::Target* SmartFrameMessage::mutable_targets_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.SmartFrameMessage.targets_)
  return targets__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Target >*
SmartFrameMessage::mutable_targets_() {
  // @@protoc_insertion_point(field_mutable_list:x3.SmartFrameMessage.targets_)
  return &targets__;
}
inline const ::x3::Target& SmartFrameMessage::_internal_targets_(int index) const {
  return targets__.Get(index);
}
inline const ::x3::Target& SmartFrameMessage::targets_(int index) const {
  // @@protoc_insertion_point(field_get:x3.SmartFrameMessage.targets_)
  return _internal_targets_(index);
}
inline ::x3::Target* SmartFrameMessage::_internal_add_targets_() {
  return targets__.Add();
}
inline ::x3::Target* SmartFrameMessage::add_targets_() {
  ::x3::Target* _add = _internal_add_targets_();
  // @@protoc_insertion_point(field_add:x3.SmartFrameMessage.targets_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Target >&
SmartFrameMessage::targets_() const {
  // @@protoc_insertion_point(field_list:x3.SmartFrameMessage.targets_)
  return targets__;
}

// -------------------------------------------------------------------

// Capture

// string type_ = 1;
inline void Capture::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& Capture::type_() const {
  // @@protoc_insertion_point(field_get:x3.Capture.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Capture::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Capture.type_)
}
inline std::string* Capture::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.Capture.type_)
  return _s;
}
inline const std::string& Capture::_internal_type_() const {
  return type__.Get();
}
inline void Capture::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* Capture::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* Capture::release_type_() {
  // @@protoc_insertion_point(field_release:x3.Capture.type_)
  return type__.Release();
}
inline void Capture::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Capture.type_)
}

// fixed64 timestamp_ = 2;
inline void Capture::clear_timestamp_() {
  timestamp__ = uint64_t{0u};
}
inline uint64_t Capture::_internal_timestamp_() const {
  return timestamp__;
}
inline uint64_t Capture::timestamp_() const {
  // @@protoc_insertion_point(field_get:x3.Capture.timestamp_)
  return _internal_timestamp_();
}
inline void Capture::_internal_set_timestamp_(uint64_t value) {
  
  timestamp__ = value;
}
inline void Capture::set_timestamp_(uint64_t value) {
  _internal_set_timestamp_(value);
  // @@protoc_insertion_point(field_set:x3.Capture.timestamp_)
}

// .x3.Image img_ = 3;
inline bool Capture::_internal_has_img_() const {
  return this != internal_default_instance() && img__ != nullptr;
}
inline bool Capture::has_img_() const {
  return _internal_has_img_();
}
inline void Capture::clear_img_() {
  if (GetArenaForAllocation() == nullptr && img__ != nullptr) {
    delete img__;
  }
  img__ = nullptr;
}
inline const ::x3::Image& Capture::_internal_img_() const {
  const ::x3::Image* p = img__;
  return p != nullptr ? *p : reinterpret_cast<const ::x3::Image&>(
      ::x3::_Image_default_instance_);
}
inline const ::x3::Image& Capture::img_() const {
  // @@protoc_insertion_point(field_get:x3.Capture.img_)
  return _internal_img_();
}
inline void Capture::unsafe_arena_set_allocated_img_(
    ::x3::Image* img_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(img__);
  }
  img__ = img_;
  if (img_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:x3.Capture.img_)
}
inline ::x3::Image* Capture::release_img_() {
  
  ::x3::Image* temp = img__;
  img__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::x3::Image* Capture::unsafe_arena_release_img_() {
  // @@protoc_insertion_point(field_release:x3.Capture.img_)
  
  ::x3::Image* temp = img__;
  img__ = nullptr;
  return temp;
}
inline ::x3::Image* Capture::_internal_mutable_img_() {
  
  if (img__ == nullptr) {
    auto* p = CreateMaybeMessage<::x3::Image>(GetArenaForAllocation());
    img__ = p;
  }
  return img__;
}
inline ::x3::Image* Capture::mutable_img_() {
  ::x3::Image* _msg = _internal_mutable_img_();
  // @@protoc_insertion_point(field_mutable:x3.Capture.img_)
  return _msg;
}
inline void Capture::set_allocated_img_(::x3::Image* img_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete img__;
  }
  if (img_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(img_);
    if (message_arena != submessage_arena) {
      img_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, img_, submessage_arena);
    }
    
  } else {
    
  }
  img__ = img_;
  // @@protoc_insertion_point(field_set_allocated:x3.Capture.img_)
}

// repeated .x3.Box boxes_ = 4;
inline int Capture::_internal_boxes__size() const {
  return boxes__.size();
}
inline int Capture::boxes__size() const {
  return _internal_boxes__size();
}
inline void Capture::clear_boxes_() {
  boxes__.Clear();
}
inline ::x3::Box* Capture::mutable_boxes_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Capture.boxes_)
  return boxes__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Box >*
Capture::mutable_boxes_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Capture.boxes_)
  return &boxes__;
}
inline const ::x3::Box& Capture::_internal_boxes_(int index) const {
  return boxes__.Get(index);
}
inline const ::x3::Box& Capture::boxes_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Capture.boxes_)
  return _internal_boxes_(index);
}
inline ::x3::Box* Capture::_internal_add_boxes_() {
  return boxes__.Add();
}
inline ::x3::Box* Capture::add_boxes_() {
  ::x3::Box* _add = _internal_add_boxes_();
  // @@protoc_insertion_point(field_add:x3.Capture.boxes_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Box >&
Capture::boxes_() const {
  // @@protoc_insertion_point(field_list:x3.Capture.boxes_)
  return boxes__;
}

// repeated .x3.Attributes attributes_ = 5;
inline int Capture::_internal_attributes__size() const {
  return attributes__.size();
}
inline int Capture::attributes__size() const {
  return _internal_attributes__size();
}
inline void Capture::clear_attributes_() {
  attributes__.Clear();
}
inline ::x3::Attributes* Capture::mutable_attributes_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Capture.attributes_)
  return attributes__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Attributes >*
Capture::mutable_attributes_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Capture.attributes_)
  return &attributes__;
}
inline const ::x3::Attributes& Capture::_internal_attributes_(int index) const {
  return attributes__.Get(index);
}
inline const ::x3::Attributes& Capture::attributes_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Capture.attributes_)
  return _internal_attributes_(index);
}
inline ::x3::Attributes* Capture::_internal_add_attributes_() {
  return attributes__.Add();
}
inline ::x3::Attributes* Capture::add_attributes_() {
  ::x3::Attributes* _add = _internal_add_attributes_();
  // @@protoc_insertion_point(field_add:x3.Capture.attributes_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Attributes >&
Capture::attributes_() const {
  // @@protoc_insertion_point(field_list:x3.Capture.attributes_)
  return attributes__;
}

// repeated .x3.Points points_ = 6;
inline int Capture::_internal_points__size() const {
  return points__.size();
}
inline int Capture::points__size() const {
  return _internal_points__size();
}
inline void Capture::clear_points_() {
  points__.Clear();
}
inline ::x3::Points* Capture::mutable_points_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Capture.points_)
  return points__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Points >*
Capture::mutable_points_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Capture.points_)
  return &points__;
}
inline const ::x3::Points& Capture::_internal_points_(int index) const {
  return points__.Get(index);
}
inline const ::x3::Points& Capture::points_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Capture.points_)
  return _internal_points_(index);
}
inline ::x3::Points* Capture::_internal_add_points_() {
  return points__.Add();
}
inline ::x3::Points* Capture::add_points_() {
  ::x3::Points* _add = _internal_add_points_();
  // @@protoc_insertion_point(field_add:x3.Capture.points_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Points >&
Capture::points_() const {
  // @@protoc_insertion_point(field_list:x3.Capture.points_)
  return points__;
}

// repeated .x3.FloatArray float_arrays_ = 7;
inline int Capture::_internal_float_arrays__size() const {
  return float_arrays__.size();
}
inline int Capture::float_arrays__size() const {
  return _internal_float_arrays__size();
}
inline void Capture::clear_float_arrays_() {
  float_arrays__.Clear();
}
inline ::x3::FloatArray* Capture::mutable_float_arrays_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Capture.float_arrays_)
  return float_arrays__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatArray >*
Capture::mutable_float_arrays_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Capture.float_arrays_)
  return &float_arrays__;
}
inline const ::x3::FloatArray& Capture::_internal_float_arrays_(int index) const {
  return float_arrays__.Get(index);
}
inline const ::x3::FloatArray& Capture::float_arrays_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Capture.float_arrays_)
  return _internal_float_arrays_(index);
}
inline ::x3::FloatArray* Capture::_internal_add_float_arrays_() {
  return float_arrays__.Add();
}
inline ::x3::FloatArray* Capture::add_float_arrays_() {
  ::x3::FloatArray* _add = _internal_add_float_arrays_();
  // @@protoc_insertion_point(field_add:x3.Capture.float_arrays_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::FloatArray >&
Capture::float_arrays_() const {
  // @@protoc_insertion_point(field_list:x3.Capture.float_arrays_)
  return float_arrays__;
}

// repeated .x3.CharArray char_arrays_ = 8;
inline int Capture::_internal_char_arrays__size() const {
  return char_arrays__.size();
}
inline int Capture::char_arrays__size() const {
  return _internal_char_arrays__size();
}
inline void Capture::clear_char_arrays_() {
  char_arrays__.Clear();
}
inline ::x3::CharArray* Capture::mutable_char_arrays_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Capture.char_arrays_)
  return char_arrays__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::CharArray >*
Capture::mutable_char_arrays_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Capture.char_arrays_)
  return &char_arrays__;
}
inline const ::x3::CharArray& Capture::_internal_char_arrays_(int index) const {
  return char_arrays__.Get(index);
}
inline const ::x3::CharArray& Capture::char_arrays_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Capture.char_arrays_)
  return _internal_char_arrays_(index);
}
inline ::x3::CharArray* Capture::_internal_add_char_arrays_() {
  return char_arrays__.Add();
}
inline ::x3::CharArray* Capture::add_char_arrays_() {
  ::x3::CharArray* _add = _internal_add_char_arrays_();
  // @@protoc_insertion_point(field_add:x3.Capture.char_arrays_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::CharArray >&
Capture::char_arrays_() const {
  // @@protoc_insertion_point(field_list:x3.Capture.char_arrays_)
  return char_arrays__;
}

// -------------------------------------------------------------------

// CaptureTarget

// string type_ = 1;
inline void CaptureTarget::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& CaptureTarget::type_() const {
  // @@protoc_insertion_point(field_get:x3.CaptureTarget.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureTarget::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.CaptureTarget.type_)
}
inline std::string* CaptureTarget::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.CaptureTarget.type_)
  return _s;
}
inline const std::string& CaptureTarget::_internal_type_() const {
  return type__.Get();
}
inline void CaptureTarget::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureTarget::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureTarget::release_type_() {
  // @@protoc_insertion_point(field_release:x3.CaptureTarget.type_)
  return type__.Release();
}
inline void CaptureTarget::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.CaptureTarget.type_)
}

// uint64 track_id_ = 2;
inline void CaptureTarget::clear_track_id_() {
  track_id__ = uint64_t{0u};
}
inline uint64_t CaptureTarget::_internal_track_id_() const {
  return track_id__;
}
inline uint64_t CaptureTarget::track_id_() const {
  // @@protoc_insertion_point(field_get:x3.CaptureTarget.track_id_)
  return _internal_track_id_();
}
inline void CaptureTarget::_internal_set_track_id_(uint64_t value) {
  
  track_id__ = value;
}
inline void CaptureTarget::set_track_id_(uint64_t value) {
  _internal_set_track_id_(value);
  // @@protoc_insertion_point(field_set:x3.CaptureTarget.track_id_)
}

// repeated .x3.Capture captures_ = 3;
inline int CaptureTarget::_internal_captures__size() const {
  return captures__.size();
}
inline int CaptureTarget::captures__size() const {
  return _internal_captures__size();
}
inline void CaptureTarget::clear_captures_() {
  captures__.Clear();
}
inline ::x3::Capture* CaptureTarget::mutable_captures_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.CaptureTarget.captures_)
  return captures__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Capture >*
CaptureTarget::mutable_captures_() {
  // @@protoc_insertion_point(field_mutable_list:x3.CaptureTarget.captures_)
  return &captures__;
}
inline const ::x3::Capture& CaptureTarget::_internal_captures_(int index) const {
  return captures__.Get(index);
}
inline const ::x3::Capture& CaptureTarget::captures_(int index) const {
  // @@protoc_insertion_point(field_get:x3.CaptureTarget.captures_)
  return _internal_captures_(index);
}
inline ::x3::Capture* CaptureTarget::_internal_add_captures_() {
  return captures__.Add();
}
inline ::x3::Capture* CaptureTarget::add_captures_() {
  ::x3::Capture* _add = _internal_add_captures_();
  // @@protoc_insertion_point(field_add:x3.CaptureTarget.captures_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Capture >&
CaptureTarget::captures_() const {
  // @@protoc_insertion_point(field_list:x3.CaptureTarget.captures_)
  return captures__;
}

// repeated .x3.DBResult db_results_ = 4;
inline int CaptureTarget::_internal_db_results__size() const {
  return db_results__.size();
}
inline int CaptureTarget::db_results__size() const {
  return _internal_db_results__size();
}
inline void CaptureTarget::clear_db_results_() {
  db_results__.Clear();
}
inline ::x3::DBResult* CaptureTarget::mutable_db_results_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.CaptureTarget.db_results_)
  return db_results__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::DBResult >*
CaptureTarget::mutable_db_results_() {
  // @@protoc_insertion_point(field_mutable_list:x3.CaptureTarget.db_results_)
  return &db_results__;
}
inline const ::x3::DBResult& CaptureTarget::_internal_db_results_(int index) const {
  return db_results__.Get(index);
}
inline const ::x3::DBResult& CaptureTarget::db_results_(int index) const {
  // @@protoc_insertion_point(field_get:x3.CaptureTarget.db_results_)
  return _internal_db_results_(index);
}
inline ::x3::DBResult* CaptureTarget::_internal_add_db_results_() {
  return db_results__.Add();
}
inline ::x3::DBResult* CaptureTarget::add_db_results_() {
  ::x3::DBResult* _add = _internal_add_db_results_();
  // @@protoc_insertion_point(field_add:x3.CaptureTarget.db_results_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::DBResult >&
CaptureTarget::db_results_() const {
  // @@protoc_insertion_point(field_list:x3.CaptureTarget.db_results_)
  return db_results__;
}

// -------------------------------------------------------------------

// CaptureFrameMessage

// repeated .x3.CaptureTarget targets_ = 1;
inline int CaptureFrameMessage::_internal_targets__size() const {
  return targets__.size();
}
inline int CaptureFrameMessage::targets__size() const {
  return _internal_targets__size();
}
inline void CaptureFrameMessage::clear_targets_() {
  targets__.Clear();
}
inline ::x3::CaptureTarget* CaptureFrameMessage::mutable_targets_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.CaptureFrameMessage.targets_)
  return targets__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::CaptureTarget >*
CaptureFrameMessage::mutable_targets_() {
  // @@protoc_insertion_point(field_mutable_list:x3.CaptureFrameMessage.targets_)
  return &targets__;
}
inline const ::x3::CaptureTarget& CaptureFrameMessage::_internal_targets_(int index) const {
  return targets__.Get(index);
}
inline const ::x3::CaptureTarget& CaptureFrameMessage::targets_(int index) const {
  // @@protoc_insertion_point(field_get:x3.CaptureFrameMessage.targets_)
  return _internal_targets_(index);
}
inline ::x3::CaptureTarget* CaptureFrameMessage::_internal_add_targets_() {
  return targets__.Add();
}
inline ::x3::CaptureTarget* CaptureFrameMessage::add_targets_() {
  ::x3::CaptureTarget* _add = _internal_add_targets_();
  // @@protoc_insertion_point(field_add:x3.CaptureFrameMessage.targets_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::CaptureTarget >&
CaptureFrameMessage::targets_() const {
  // @@protoc_insertion_point(field_list:x3.CaptureFrameMessage.targets_)
  return targets__;
}

// -------------------------------------------------------------------

// StatisticsMessage

// repeated .x3.Attributes attributes_ = 1;
inline int StatisticsMessage::_internal_attributes__size() const {
  return attributes__.size();
}
inline int StatisticsMessage::attributes__size() const {
  return _internal_attributes__size();
}
inline void StatisticsMessage::clear_attributes_() {
  attributes__.Clear();
}
inline ::x3::Attributes* StatisticsMessage::mutable_attributes_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.StatisticsMessage.attributes_)
  return attributes__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Attributes >*
StatisticsMessage::mutable_attributes_() {
  // @@protoc_insertion_point(field_mutable_list:x3.StatisticsMessage.attributes_)
  return &attributes__;
}
inline const ::x3::Attributes& StatisticsMessage::_internal_attributes_(int index) const {
  return attributes__.Get(index);
}
inline const ::x3::Attributes& StatisticsMessage::attributes_(int index) const {
  // @@protoc_insertion_point(field_get:x3.StatisticsMessage.attributes_)
  return _internal_attributes_(index);
}
inline ::x3::Attributes* StatisticsMessage::_internal_add_attributes_() {
  return attributes__.Add();
}
inline ::x3::Attributes* StatisticsMessage::add_attributes_() {
  ::x3::Attributes* _add = _internal_add_attributes_();
  // @@protoc_insertion_point(field_add:x3.StatisticsMessage.attributes_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Attributes >&
StatisticsMessage::attributes_() const {
  // @@protoc_insertion_point(field_list:x3.StatisticsMessage.attributes_)
  return attributes__;
}

// -------------------------------------------------------------------

// FrameMessage

// .x3.SmartFrameMessage smart_msg_ = 1;
inline bool FrameMessage::_internal_has_smart_msg_() const {
  return this != internal_default_instance() && smart_msg__ != nullptr;
}
inline bool FrameMessage::has_smart_msg_() const {
  return _internal_has_smart_msg_();
}
inline void FrameMessage::clear_smart_msg_() {
  if (GetArenaForAllocation() == nullptr && smart_msg__ != nullptr) {
    delete smart_msg__;
  }
  smart_msg__ = nullptr;
}
inline const ::x3::SmartFrameMessage& FrameMessage::_internal_smart_msg_() const {
  const ::x3::SmartFrameMessage* p = smart_msg__;
  return p != nullptr ? *p : reinterpret_cast<const ::x3::SmartFrameMessage&>(
      ::x3::_SmartFrameMessage_default_instance_);
}
inline const ::x3::SmartFrameMessage& FrameMessage::smart_msg_() const {
  // @@protoc_insertion_point(field_get:x3.FrameMessage.smart_msg_)
  return _internal_smart_msg_();
}
inline void FrameMessage::unsafe_arena_set_allocated_smart_msg_(
    ::x3::SmartFrameMessage* smart_msg_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smart_msg__);
  }
  smart_msg__ = smart_msg_;
  if (smart_msg_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:x3.FrameMessage.smart_msg_)
}
inline ::x3::SmartFrameMessage* FrameMessage::release_smart_msg_() {
  
  ::x3::SmartFrameMessage* temp = smart_msg__;
  smart_msg__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::x3::SmartFrameMessage* FrameMessage::unsafe_arena_release_smart_msg_() {
  // @@protoc_insertion_point(field_release:x3.FrameMessage.smart_msg_)
  
  ::x3::SmartFrameMessage* temp = smart_msg__;
  smart_msg__ = nullptr;
  return temp;
}
inline ::x3::SmartFrameMessage* FrameMessage::_internal_mutable_smart_msg_() {
  
  if (smart_msg__ == nullptr) {
    auto* p = CreateMaybeMessage<::x3::SmartFrameMessage>(GetArenaForAllocation());
    smart_msg__ = p;
  }
  return smart_msg__;
}
inline ::x3::SmartFrameMessage* FrameMessage::mutable_smart_msg_() {
  ::x3::SmartFrameMessage* _msg = _internal_mutable_smart_msg_();
  // @@protoc_insertion_point(field_mutable:x3.FrameMessage.smart_msg_)
  return _msg;
}
inline void FrameMessage::set_allocated_smart_msg_(::x3::SmartFrameMessage* smart_msg_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete smart_msg__;
  }
  if (smart_msg_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(smart_msg_);
    if (message_arena != submessage_arena) {
      smart_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smart_msg_, submessage_arena);
    }
    
  } else {
    
  }
  smart_msg__ = smart_msg_;
  // @@protoc_insertion_point(field_set_allocated:x3.FrameMessage.smart_msg_)
}

// .x3.CaptureFrameMessage capture_msg_ = 2;
inline bool FrameMessage::_internal_has_capture_msg_() const {
  return this != internal_default_instance() && capture_msg__ != nullptr;
}
inline bool FrameMessage::has_capture_msg_() const {
  return _internal_has_capture_msg_();
}
inline void FrameMessage::clear_capture_msg_() {
  if (GetArenaForAllocation() == nullptr && capture_msg__ != nullptr) {
    delete capture_msg__;
  }
  capture_msg__ = nullptr;
}
inline const ::x3::CaptureFrameMessage& FrameMessage::_internal_capture_msg_() const {
  const ::x3::CaptureFrameMessage* p = capture_msg__;
  return p != nullptr ? *p : reinterpret_cast<const ::x3::CaptureFrameMessage&>(
      ::x3::_CaptureFrameMessage_default_instance_);
}
inline const ::x3::CaptureFrameMessage& FrameMessage::capture_msg_() const {
  // @@protoc_insertion_point(field_get:x3.FrameMessage.capture_msg_)
  return _internal_capture_msg_();
}
inline void FrameMessage::unsafe_arena_set_allocated_capture_msg_(
    ::x3::CaptureFrameMessage* capture_msg_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capture_msg__);
  }
  capture_msg__ = capture_msg_;
  if (capture_msg_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:x3.FrameMessage.capture_msg_)
}
inline ::x3::CaptureFrameMessage* FrameMessage::release_capture_msg_() {
  
  ::x3::CaptureFrameMessage* temp = capture_msg__;
  capture_msg__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::x3::CaptureFrameMessage* FrameMessage::unsafe_arena_release_capture_msg_() {
  // @@protoc_insertion_point(field_release:x3.FrameMessage.capture_msg_)
  
  ::x3::CaptureFrameMessage* temp = capture_msg__;
  capture_msg__ = nullptr;
  return temp;
}
inline ::x3::CaptureFrameMessage* FrameMessage::_internal_mutable_capture_msg_() {
  
  if (capture_msg__ == nullptr) {
    auto* p = CreateMaybeMessage<::x3::CaptureFrameMessage>(GetArenaForAllocation());
    capture_msg__ = p;
  }
  return capture_msg__;
}
inline ::x3::CaptureFrameMessage* FrameMessage::mutable_capture_msg_() {
  ::x3::CaptureFrameMessage* _msg = _internal_mutable_capture_msg_();
  // @@protoc_insertion_point(field_mutable:x3.FrameMessage.capture_msg_)
  return _msg;
}
inline void FrameMessage::set_allocated_capture_msg_(::x3::CaptureFrameMessage* capture_msg_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete capture_msg__;
  }
  if (capture_msg_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capture_msg_);
    if (message_arena != submessage_arena) {
      capture_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_msg_, submessage_arena);
    }
    
  } else {
    
  }
  capture_msg__ = capture_msg_;
  // @@protoc_insertion_point(field_set_allocated:x3.FrameMessage.capture_msg_)
}

// .x3.StatisticsMessage Statistics_msg_ = 3;
inline bool FrameMessage::_internal_has_statistics_msg_() const {
  return this != internal_default_instance() && statistics_msg__ != nullptr;
}
inline bool FrameMessage::has_statistics_msg_() const {
  return _internal_has_statistics_msg_();
}
inline void FrameMessage::clear_statistics_msg_() {
  if (GetArenaForAllocation() == nullptr && statistics_msg__ != nullptr) {
    delete statistics_msg__;
  }
  statistics_msg__ = nullptr;
}
inline const ::x3::StatisticsMessage& FrameMessage::_internal_statistics_msg_() const {
  const ::x3::StatisticsMessage* p = statistics_msg__;
  return p != nullptr ? *p : reinterpret_cast<const ::x3::StatisticsMessage&>(
      ::x3::_StatisticsMessage_default_instance_);
}
inline const ::x3::StatisticsMessage& FrameMessage::statistics_msg_() const {
  // @@protoc_insertion_point(field_get:x3.FrameMessage.Statistics_msg_)
  return _internal_statistics_msg_();
}
inline void FrameMessage::unsafe_arena_set_allocated_statistics_msg_(
    ::x3::StatisticsMessage* statistics_msg_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statistics_msg__);
  }
  statistics_msg__ = statistics_msg_;
  if (statistics_msg_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:x3.FrameMessage.Statistics_msg_)
}
inline ::x3::StatisticsMessage* FrameMessage::release_statistics_msg_() {
  
  ::x3::StatisticsMessage* temp = statistics_msg__;
  statistics_msg__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::x3::StatisticsMessage* FrameMessage::unsafe_arena_release_statistics_msg_() {
  // @@protoc_insertion_point(field_release:x3.FrameMessage.Statistics_msg_)
  
  ::x3::StatisticsMessage* temp = statistics_msg__;
  statistics_msg__ = nullptr;
  return temp;
}
inline ::x3::StatisticsMessage* FrameMessage::_internal_mutable_statistics_msg_() {
  
  if (statistics_msg__ == nullptr) {
    auto* p = CreateMaybeMessage<::x3::StatisticsMessage>(GetArenaForAllocation());
    statistics_msg__ = p;
  }
  return statistics_msg__;
}
inline ::x3::StatisticsMessage* FrameMessage::mutable_statistics_msg_() {
  ::x3::StatisticsMessage* _msg = _internal_mutable_statistics_msg_();
  // @@protoc_insertion_point(field_mutable:x3.FrameMessage.Statistics_msg_)
  return _msg;
}
inline void FrameMessage::set_allocated_statistics_msg_(::x3::StatisticsMessage* statistics_msg_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete statistics_msg__;
  }
  if (statistics_msg_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(statistics_msg_);
    if (message_arena != submessage_arena) {
      statistics_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statistics_msg_, submessage_arena);
    }
    
  } else {
    
  }
  statistics_msg__ = statistics_msg_;
  // @@protoc_insertion_point(field_set_allocated:x3.FrameMessage.Statistics_msg_)
}

// .x3.Image img_ = 4;
inline bool FrameMessage::_internal_has_img_() const {
  return this != internal_default_instance() && img__ != nullptr;
}
inline bool FrameMessage::has_img_() const {
  return _internal_has_img_();
}
inline void FrameMessage::clear_img_() {
  if (GetArenaForAllocation() == nullptr && img__ != nullptr) {
    delete img__;
  }
  img__ = nullptr;
}
inline const ::x3::Image& FrameMessage::_internal_img_() const {
  const ::x3::Image* p = img__;
  return p != nullptr ? *p : reinterpret_cast<const ::x3::Image&>(
      ::x3::_Image_default_instance_);
}
inline const ::x3::Image& FrameMessage::img_() const {
  // @@protoc_insertion_point(field_get:x3.FrameMessage.img_)
  return _internal_img_();
}
inline void FrameMessage::unsafe_arena_set_allocated_img_(
    ::x3::Image* img_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(img__);
  }
  img__ = img_;
  if (img_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:x3.FrameMessage.img_)
}
inline ::x3::Image* FrameMessage::release_img_() {
  
  ::x3::Image* temp = img__;
  img__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::x3::Image* FrameMessage::unsafe_arena_release_img_() {
  // @@protoc_insertion_point(field_release:x3.FrameMessage.img_)
  
  ::x3::Image* temp = img__;
  img__ = nullptr;
  return temp;
}
inline ::x3::Image* FrameMessage::_internal_mutable_img_() {
  
  if (img__ == nullptr) {
    auto* p = CreateMaybeMessage<::x3::Image>(GetArenaForAllocation());
    img__ = p;
  }
  return img__;
}
inline ::x3::Image* FrameMessage::mutable_img_() {
  ::x3::Image* _msg = _internal_mutable_img_();
  // @@protoc_insertion_point(field_mutable:x3.FrameMessage.img_)
  return _msg;
}
inline void FrameMessage::set_allocated_img_(::x3::Image* img_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete img__;
  }
  if (img_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(img_);
    if (message_arena != submessage_arena) {
      img_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, img_, submessage_arena);
    }
    
  } else {
    
  }
  img__ = img_;
  // @@protoc_insertion_point(field_set_allocated:x3.FrameMessage.img_)
}

// fixed64 timestamp_ = 5;
inline void FrameMessage::clear_timestamp_() {
  timestamp__ = uint64_t{0u};
}
inline uint64_t FrameMessage::_internal_timestamp_() const {
  return timestamp__;
}
inline uint64_t FrameMessage::timestamp_() const {
  // @@protoc_insertion_point(field_get:x3.FrameMessage.timestamp_)
  return _internal_timestamp_();
}
inline void FrameMessage::_internal_set_timestamp_(uint64_t value) {
  
  timestamp__ = value;
}
inline void FrameMessage::set_timestamp_(uint64_t value) {
  _internal_set_timestamp_(value);
  // @@protoc_insertion_point(field_set:x3.FrameMessage.timestamp_)
}

// uint64 sequence_id_ = 6;
inline void FrameMessage::clear_sequence_id_() {
  sequence_id__ = uint64_t{0u};
}
inline uint64_t FrameMessage::_internal_sequence_id_() const {
  return sequence_id__;
}
inline uint64_t FrameMessage::sequence_id_() const {
  // @@protoc_insertion_point(field_get:x3.FrameMessage.sequence_id_)
  return _internal_sequence_id_();
}
inline void FrameMessage::_internal_set_sequence_id_(uint64_t value) {
  
  sequence_id__ = value;
}
inline void FrameMessage::set_sequence_id_(uint64_t value) {
  _internal_set_sequence_id_(value);
  // @@protoc_insertion_point(field_set:x3.FrameMessage.sequence_id_)
}

// repeated .x3.Image extimgs_ = 7;
inline int FrameMessage::_internal_extimgs__size() const {
  return extimgs__.size();
}
inline int FrameMessage::extimgs__size() const {
  return _internal_extimgs__size();
}
inline void FrameMessage::clear_extimgs_() {
  extimgs__.Clear();
}
inline ::x3::Image* FrameMessage::mutable_extimgs_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.FrameMessage.extimgs_)
  return extimgs__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Image >*
FrameMessage::mutable_extimgs_() {
  // @@protoc_insertion_point(field_mutable_list:x3.FrameMessage.extimgs_)
  return &extimgs__;
}
inline const ::x3::Image& FrameMessage::_internal_extimgs_(int index) const {
  return extimgs__.Get(index);
}
inline const ::x3::Image& FrameMessage::extimgs_(int index) const {
  // @@protoc_insertion_point(field_get:x3.FrameMessage.extimgs_)
  return _internal_extimgs_(index);
}
inline ::x3::Image* FrameMessage::_internal_add_extimgs_() {
  return extimgs__.Add();
}
inline ::x3::Image* FrameMessage::add_extimgs_() {
  ::x3::Image* _add = _internal_add_extimgs_();
  // @@protoc_insertion_point(field_add:x3.FrameMessage.extimgs_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Image >&
FrameMessage::extimgs_() const {
  // @@protoc_insertion_point(field_list:x3.FrameMessage.extimgs_)
  return extimgs__;
}

// -------------------------------------------------------------------

// Capability

// string type_ = 1;
inline void Capability::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& Capability::type_() const {
  // @@protoc_insertion_point(field_get:x3.Capability.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Capability::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Capability.type_)
}
inline std::string* Capability::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.Capability.type_)
  return _s;
}
inline const std::string& Capability::_internal_type_() const {
  return type__.Get();
}
inline void Capability::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* Capability::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* Capability::release_type_() {
  // @@protoc_insertion_point(field_release:x3.Capability.type_)
  return type__.Release();
}
inline void Capability::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Capability.type_)
}

// .x3.Enable cap_array_ = 2;
inline bool Capability::_internal_has_cap_array_() const {
  return this != internal_default_instance() && cap_array__ != nullptr;
}
inline bool Capability::has_cap_array_() const {
  return _internal_has_cap_array_();
}
inline void Capability::clear_cap_array_() {
  if (GetArenaForAllocation() == nullptr && cap_array__ != nullptr) {
    delete cap_array__;
  }
  cap_array__ = nullptr;
}
inline const ::x3::Enable& Capability::_internal_cap_array_() const {
  const ::x3::Enable* p = cap_array__;
  return p != nullptr ? *p : reinterpret_cast<const ::x3::Enable&>(
      ::x3::_Enable_default_instance_);
}
inline const ::x3::Enable& Capability::cap_array_() const {
  // @@protoc_insertion_point(field_get:x3.Capability.cap_array_)
  return _internal_cap_array_();
}
inline void Capability::unsafe_arena_set_allocated_cap_array_(
    ::x3::Enable* cap_array_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cap_array__);
  }
  cap_array__ = cap_array_;
  if (cap_array_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:x3.Capability.cap_array_)
}
inline ::x3::Enable* Capability::release_cap_array_() {
  
  ::x3::Enable* temp = cap_array__;
  cap_array__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::x3::Enable* Capability::unsafe_arena_release_cap_array_() {
  // @@protoc_insertion_point(field_release:x3.Capability.cap_array_)
  
  ::x3::Enable* temp = cap_array__;
  cap_array__ = nullptr;
  return temp;
}
inline ::x3::Enable* Capability::_internal_mutable_cap_array_() {
  
  if (cap_array__ == nullptr) {
    auto* p = CreateMaybeMessage<::x3::Enable>(GetArenaForAllocation());
    cap_array__ = p;
  }
  return cap_array__;
}
inline ::x3::Enable* Capability::mutable_cap_array_() {
  ::x3::Enable* _msg = _internal_mutable_cap_array_();
  // @@protoc_insertion_point(field_mutable:x3.Capability.cap_array_)
  return _msg;
}
inline void Capability::set_allocated_cap_array_(::x3::Enable* cap_array_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cap_array__;
  }
  if (cap_array_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cap_array_);
    if (message_arena != submessage_arena) {
      cap_array_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cap_array_, submessage_arena);
    }
    
  } else {
    
  }
  cap_array__ = cap_array_;
  // @@protoc_insertion_point(field_set_allocated:x3.Capability.cap_array_)
}

// -------------------------------------------------------------------

// Version

// string type_ = 1;
inline void Version::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& Version::type_() const {
  // @@protoc_insertion_point(field_get:x3.Version.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Version.type_)
}
inline std::string* Version::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.Version.type_)
  return _s;
}
inline const std::string& Version::_internal_type_() const {
  return type__.Get();
}
inline void Version::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* Version::release_type_() {
  // @@protoc_insertion_point(field_release:x3.Version.type_)
  return type__.Release();
}
inline void Version::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Version.type_)
}

// string value_ = 2;
inline void Version::clear_value_() {
  value__.ClearToEmpty();
}
inline const std::string& Version::value_() const {
  // @@protoc_insertion_point(field_get:x3.Version.value_)
  return _internal_value_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_value_(ArgT0&& arg0, ArgT... args) {
 
 value__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Version.value_)
}
inline std::string* Version::mutable_value_() {
  std::string* _s = _internal_mutable_value_();
  // @@protoc_insertion_point(field_mutable:x3.Version.value_)
  return _s;
}
inline const std::string& Version::_internal_value_() const {
  return value__.Get();
}
inline void Version::_internal_set_value_(const std::string& value) {
  
  value__.Set(value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_value_() {
  
  return value__.Mutable(GetArenaForAllocation());
}
inline std::string* Version::release_value_() {
  // @@protoc_insertion_point(field_release:x3.Version.value_)
  return value__.Release();
}
inline void Version::set_allocated_value_(std::string* value_) {
  if (value_ != nullptr) {
    
  } else {
    
  }
  value__.SetAllocated(value_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value__.IsDefault()) {
    value__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Version.value_)
}

// -------------------------------------------------------------------

// Config

// string type_ = 1;
inline void Config::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& Config::type_() const {
  // @@protoc_insertion_point(field_get:x3.Config.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Config.type_)
}
inline std::string* Config::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.Config.type_)
  return _s;
}
inline const std::string& Config::_internal_type_() const {
  return type__.Get();
}
inline void Config::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_type_() {
  // @@protoc_insertion_point(field_release:x3.Config.type_)
  return type__.Release();
}
inline void Config::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Config.type_)
}

// repeated .x3.Threshold threshold_ = 2;
inline int Config::_internal_threshold__size() const {
  return threshold__.size();
}
inline int Config::threshold__size() const {
  return _internal_threshold__size();
}
inline void Config::clear_threshold_() {
  threshold__.Clear();
}
inline ::x3::Threshold* Config::mutable_threshold_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Config.threshold_)
  return threshold__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Threshold >*
Config::mutable_threshold_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Config.threshold_)
  return &threshold__;
}
inline const ::x3::Threshold& Config::_internal_threshold_(int index) const {
  return threshold__.Get(index);
}
inline const ::x3::Threshold& Config::threshold_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Config.threshold_)
  return _internal_threshold_(index);
}
inline ::x3::Threshold* Config::_internal_add_threshold_() {
  return threshold__.Add();
}
inline ::x3::Threshold* Config::add_threshold_() {
  ::x3::Threshold* _add = _internal_add_threshold_();
  // @@protoc_insertion_point(field_add:x3.Config.threshold_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Threshold >&
Config::threshold_() const {
  // @@protoc_insertion_point(field_list:x3.Config.threshold_)
  return threshold__;
}

// repeated .x3.Mode mode_ = 3;
inline int Config::_internal_mode__size() const {
  return mode__.size();
}
inline int Config::mode__size() const {
  return _internal_mode__size();
}
inline void Config::clear_mode_() {
  mode__.Clear();
}
inline ::x3::Mode* Config::mutable_mode_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Config.mode_)
  return mode__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Mode >*
Config::mutable_mode_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Config.mode_)
  return &mode__;
}
inline const ::x3::Mode& Config::_internal_mode_(int index) const {
  return mode__.Get(index);
}
inline const ::x3::Mode& Config::mode_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Config.mode_)
  return _internal_mode_(index);
}
inline ::x3::Mode* Config::_internal_add_mode_() {
  return mode__.Add();
}
inline ::x3::Mode* Config::add_mode_() {
  ::x3::Mode* _add = _internal_add_mode_();
  // @@protoc_insertion_point(field_add:x3.Config.mode_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Mode >&
Config::mode_() const {
  // @@protoc_insertion_point(field_list:x3.Config.mode_)
  return mode__;
}

// repeated .x3.Box shield_ = 4;
inline int Config::_internal_shield__size() const {
  return shield__.size();
}
inline int Config::shield__size() const {
  return _internal_shield__size();
}
inline void Config::clear_shield_() {
  shield__.Clear();
}
inline ::x3::Box* Config::mutable_shield_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Config.shield_)
  return shield__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Box >*
Config::mutable_shield_() {
  // @@protoc_insertion_point(field_mutable_list:x3.Config.shield_)
  return &shield__;
}
inline const ::x3::Box& Config::_internal_shield_(int index) const {
  return shield__.Get(index);
}
inline const ::x3::Box& Config::shield_(int index) const {
  // @@protoc_insertion_point(field_get:x3.Config.shield_)
  return _internal_shield_(index);
}
inline ::x3::Box* Config::_internal_add_shield_() {
  return shield__.Add();
}
inline ::x3::Box* Config::add_shield_() {
  ::x3::Box* _add = _internal_add_shield_();
  // @@protoc_insertion_point(field_add:x3.Config.shield_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Box >&
Config::shield_() const {
  // @@protoc_insertion_point(field_list:x3.Config.shield_)
  return shield__;
}

// -------------------------------------------------------------------

// Status

// string type_ = 1;
inline void Status::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& Status::type_() const {
  // @@protoc_insertion_point(field_get:x3.Status.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Status::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Status.type_)
}
inline std::string* Status::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.Status.type_)
  return _s;
}
inline const std::string& Status::_internal_type_() const {
  return type__.Get();
}
inline void Status::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* Status::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* Status::release_type_() {
  // @@protoc_insertion_point(field_release:x3.Status.type_)
  return type__.Release();
}
inline void Status::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Status.type_)
}

// uint64 timestamp_ = 2;
inline void Status::clear_timestamp_() {
  timestamp__ = uint64_t{0u};
}
inline uint64_t Status::_internal_timestamp_() const {
  return timestamp__;
}
inline uint64_t Status::timestamp_() const {
  // @@protoc_insertion_point(field_get:x3.Status.timestamp_)
  return _internal_timestamp_();
}
inline void Status::_internal_set_timestamp_(uint64_t value) {
  
  timestamp__ = value;
}
inline void Status::set_timestamp_(uint64_t value) {
  _internal_set_timestamp_(value);
  // @@protoc_insertion_point(field_set:x3.Status.timestamp_)
}

// .x3.Status.RunStatus run_status_ = 3;
inline void Status::clear_run_status_() {
  run_status__ = 0;
}
inline ::x3::Status_RunStatus Status::_internal_run_status_() const {
  return static_cast< ::x3::Status_RunStatus >(run_status__);
}
inline ::x3::Status_RunStatus Status::run_status_() const {
  // @@protoc_insertion_point(field_get:x3.Status.run_status_)
  return _internal_run_status_();
}
inline void Status::_internal_set_run_status_(::x3::Status_RunStatus value) {
  
  run_status__ = value;
}
inline void Status::set_run_status_(::x3::Status_RunStatus value) {
  _internal_set_run_status_(value);
  // @@protoc_insertion_point(field_set:x3.Status.run_status_)
}

// -------------------------------------------------------------------

// Command

// string type_ = 1;
inline void Command::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& Command::type_() const {
  // @@protoc_insertion_point(field_get:x3.Command.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Command.type_)
}
inline std::string* Command::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.Command.type_)
  return _s;
}
inline const std::string& Command::_internal_type_() const {
  return type__.Get();
}
inline void Command::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* Command::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* Command::release_type_() {
  // @@protoc_insertion_point(field_release:x3.Command.type_)
  return type__.Release();
}
inline void Command::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Command.type_)
}

// uint64 timestamp_ = 2;
inline void Command::clear_timestamp_() {
  timestamp__ = uint64_t{0u};
}
inline uint64_t Command::_internal_timestamp_() const {
  return timestamp__;
}
inline uint64_t Command::timestamp_() const {
  // @@protoc_insertion_point(field_get:x3.Command.timestamp_)
  return _internal_timestamp_();
}
inline void Command::_internal_set_timestamp_(uint64_t value) {
  
  timestamp__ = value;
}
inline void Command::set_timestamp_(uint64_t value) {
  _internal_set_timestamp_(value);
  // @@protoc_insertion_point(field_set:x3.Command.timestamp_)
}

// .x3.Command.Order order_ = 3;
inline void Command::clear_order_() {
  order__ = 0;
}
inline ::x3::Command_Order Command::_internal_order_() const {
  return static_cast< ::x3::Command_Order >(order__);
}
inline ::x3::Command_Order Command::order_() const {
  // @@protoc_insertion_point(field_get:x3.Command.order_)
  return _internal_order_();
}
inline void Command::_internal_set_order_(::x3::Command_Order value) {
  
  order__ = value;
}
inline void Command::set_order_(::x3::Command_Order value) {
  _internal_set_order_(value);
  // @@protoc_insertion_point(field_set:x3.Command.order_)
}

// -------------------------------------------------------------------

// Response

// string type_ = 1;
inline void Response::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& Response::type_() const {
  // @@protoc_insertion_point(field_get:x3.Response.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.Response.type_)
}
inline std::string* Response::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.Response.type_)
  return _s;
}
inline const std::string& Response::_internal_type_() const {
  return type__.Get();
}
inline void Response::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_type_() {
  // @@protoc_insertion_point(field_release:x3.Response.type_)
  return type__.Release();
}
inline void Response::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.Response.type_)
}

// uint64 timestamp_ = 2;
inline void Response::clear_timestamp_() {
  timestamp__ = uint64_t{0u};
}
inline uint64_t Response::_internal_timestamp_() const {
  return timestamp__;
}
inline uint64_t Response::timestamp_() const {
  // @@protoc_insertion_point(field_get:x3.Response.timestamp_)
  return _internal_timestamp_();
}
inline void Response::_internal_set_timestamp_(uint64_t value) {
  
  timestamp__ = value;
}
inline void Response::set_timestamp_(uint64_t value) {
  _internal_set_timestamp_(value);
  // @@protoc_insertion_point(field_set:x3.Response.timestamp_)
}

// .x3.Response.Ack ack_ = 3;
inline void Response::clear_ack_() {
  ack__ = 0;
}
inline ::x3::Response_Ack Response::_internal_ack_() const {
  return static_cast< ::x3::Response_Ack >(ack__);
}
inline ::x3::Response_Ack Response::ack_() const {
  // @@protoc_insertion_point(field_get:x3.Response.ack_)
  return _internal_ack_();
}
inline void Response::_internal_set_ack_(::x3::Response_Ack value) {
  
  ack__ = value;
}
inline void Response::set_ack_(::x3::Response_Ack value) {
  _internal_set_ack_(value);
  // @@protoc_insertion_point(field_set:x3.Response.ack_)
}

// -------------------------------------------------------------------

// LogLevel

// string type_ = 1;
inline void LogLevel::clear_type_() {
  type__.ClearToEmpty();
}
inline const std::string& LogLevel::type_() const {
  // @@protoc_insertion_point(field_get:x3.LogLevel.type_)
  return _internal_type_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogLevel::set_type_(ArgT0&& arg0, ArgT... args) {
 
 type__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.LogLevel.type_)
}
inline std::string* LogLevel::mutable_type_() {
  std::string* _s = _internal_mutable_type_();
  // @@protoc_insertion_point(field_mutable:x3.LogLevel.type_)
  return _s;
}
inline const std::string& LogLevel::_internal_type_() const {
  return type__.Get();
}
inline void LogLevel::_internal_set_type_(const std::string& value) {
  
  type__.Set(value, GetArenaForAllocation());
}
inline std::string* LogLevel::_internal_mutable_type_() {
  
  return type__.Mutable(GetArenaForAllocation());
}
inline std::string* LogLevel::release_type_() {
  // @@protoc_insertion_point(field_release:x3.LogLevel.type_)
  return type__.Release();
}
inline void LogLevel::set_allocated_type_(std::string* type_) {
  if (type_ != nullptr) {
    
  } else {
    
  }
  type__.SetAllocated(type_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type__.IsDefault()) {
    type__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.LogLevel.type_)
}

// .x3.LogLevel.Level level_ = 2;
inline void LogLevel::clear_level_() {
  level__ = 0;
}
inline ::x3::LogLevel_Level LogLevel::_internal_level_() const {
  return static_cast< ::x3::LogLevel_Level >(level__);
}
inline ::x3::LogLevel_Level LogLevel::level_() const {
  // @@protoc_insertion_point(field_get:x3.LogLevel.level_)
  return _internal_level_();
}
inline void LogLevel::_internal_set_level_(::x3::LogLevel_Level value) {
  
  level__ = value;
}
inline void LogLevel::set_level_(::x3::LogLevel_Level value) {
  _internal_set_level_(value);
  // @@protoc_insertion_point(field_set:x3.LogLevel.level_)
}

// -------------------------------------------------------------------

// InfoMessage

// .x3.Status status_ = 1;
inline bool InfoMessage::_internal_has_status_() const {
  return this != internal_default_instance() && status__ != nullptr;
}
inline bool InfoMessage::has_status_() const {
  return _internal_has_status_();
}
inline void InfoMessage::clear_status_() {
  if (GetArenaForAllocation() == nullptr && status__ != nullptr) {
    delete status__;
  }
  status__ = nullptr;
}
inline const ::x3::Status& InfoMessage::_internal_status_() const {
  const ::x3::Status* p = status__;
  return p != nullptr ? *p : reinterpret_cast<const ::x3::Status&>(
      ::x3::_Status_default_instance_);
}
inline const ::x3::Status& InfoMessage::status_() const {
  // @@protoc_insertion_point(field_get:x3.InfoMessage.status_)
  return _internal_status_();
}
inline void InfoMessage::unsafe_arena_set_allocated_status_(
    ::x3::Status* status_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status__);
  }
  status__ = status_;
  if (status_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:x3.InfoMessage.status_)
}
inline ::x3::Status* InfoMessage::release_status_() {
  
  ::x3::Status* temp = status__;
  status__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::x3::Status* InfoMessage::unsafe_arena_release_status_() {
  // @@protoc_insertion_point(field_release:x3.InfoMessage.status_)
  
  ::x3::Status* temp = status__;
  status__ = nullptr;
  return temp;
}
inline ::x3::Status* InfoMessage::_internal_mutable_status_() {
  
  if (status__ == nullptr) {
    auto* p = CreateMaybeMessage<::x3::Status>(GetArenaForAllocation());
    status__ = p;
  }
  return status__;
}
inline ::x3::Status* InfoMessage::mutable_status_() {
  ::x3::Status* _msg = _internal_mutable_status_();
  // @@protoc_insertion_point(field_mutable:x3.InfoMessage.status_)
  return _msg;
}
inline void InfoMessage::set_allocated_status_(::x3::Status* status_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status__;
  }
  if (status_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status_);
    if (message_arena != submessage_arena) {
      status_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_, submessage_arena);
    }
    
  } else {
    
  }
  status__ = status_;
  // @@protoc_insertion_point(field_set_allocated:x3.InfoMessage.status_)
}

// .x3.Command command_ = 2;
inline bool InfoMessage::_internal_has_command_() const {
  return this != internal_default_instance() && command__ != nullptr;
}
inline bool InfoMessage::has_command_() const {
  return _internal_has_command_();
}
inline void InfoMessage::clear_command_() {
  if (GetArenaForAllocation() == nullptr && command__ != nullptr) {
    delete command__;
  }
  command__ = nullptr;
}
inline const ::x3::Command& InfoMessage::_internal_command_() const {
  const ::x3::Command* p = command__;
  return p != nullptr ? *p : reinterpret_cast<const ::x3::Command&>(
      ::x3::_Command_default_instance_);
}
inline const ::x3::Command& InfoMessage::command_() const {
  // @@protoc_insertion_point(field_get:x3.InfoMessage.command_)
  return _internal_command_();
}
inline void InfoMessage::unsafe_arena_set_allocated_command_(
    ::x3::Command* command_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command__);
  }
  command__ = command_;
  if (command_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:x3.InfoMessage.command_)
}
inline ::x3::Command* InfoMessage::release_command_() {
  
  ::x3::Command* temp = command__;
  command__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::x3::Command* InfoMessage::unsafe_arena_release_command_() {
  // @@protoc_insertion_point(field_release:x3.InfoMessage.command_)
  
  ::x3::Command* temp = command__;
  command__ = nullptr;
  return temp;
}
inline ::x3::Command* InfoMessage::_internal_mutable_command_() {
  
  if (command__ == nullptr) {
    auto* p = CreateMaybeMessage<::x3::Command>(GetArenaForAllocation());
    command__ = p;
  }
  return command__;
}
inline ::x3::Command* InfoMessage::mutable_command_() {
  ::x3::Command* _msg = _internal_mutable_command_();
  // @@protoc_insertion_point(field_mutable:x3.InfoMessage.command_)
  return _msg;
}
inline void InfoMessage::set_allocated_command_(::x3::Command* command_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete command__;
  }
  if (command_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(command_);
    if (message_arena != submessage_arena) {
      command_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_, submessage_arena);
    }
    
  } else {
    
  }
  command__ = command_;
  // @@protoc_insertion_point(field_set_allocated:x3.InfoMessage.command_)
}

// .x3.LogLevel loglevel_ = 3;
inline bool InfoMessage::_internal_has_loglevel_() const {
  return this != internal_default_instance() && loglevel__ != nullptr;
}
inline bool InfoMessage::has_loglevel_() const {
  return _internal_has_loglevel_();
}
inline void InfoMessage::clear_loglevel_() {
  if (GetArenaForAllocation() == nullptr && loglevel__ != nullptr) {
    delete loglevel__;
  }
  loglevel__ = nullptr;
}
inline const ::x3::LogLevel& InfoMessage::_internal_loglevel_() const {
  const ::x3::LogLevel* p = loglevel__;
  return p != nullptr ? *p : reinterpret_cast<const ::x3::LogLevel&>(
      ::x3::_LogLevel_default_instance_);
}
inline const ::x3::LogLevel& InfoMessage::loglevel_() const {
  // @@protoc_insertion_point(field_get:x3.InfoMessage.loglevel_)
  return _internal_loglevel_();
}
inline void InfoMessage::unsafe_arena_set_allocated_loglevel_(
    ::x3::LogLevel* loglevel_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loglevel__);
  }
  loglevel__ = loglevel_;
  if (loglevel_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:x3.InfoMessage.loglevel_)
}
inline ::x3::LogLevel* InfoMessage::release_loglevel_() {
  
  ::x3::LogLevel* temp = loglevel__;
  loglevel__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::x3::LogLevel* InfoMessage::unsafe_arena_release_loglevel_() {
  // @@protoc_insertion_point(field_release:x3.InfoMessage.loglevel_)
  
  ::x3::LogLevel* temp = loglevel__;
  loglevel__ = nullptr;
  return temp;
}
inline ::x3::LogLevel* InfoMessage::_internal_mutable_loglevel_() {
  
  if (loglevel__ == nullptr) {
    auto* p = CreateMaybeMessage<::x3::LogLevel>(GetArenaForAllocation());
    loglevel__ = p;
  }
  return loglevel__;
}
inline ::x3::LogLevel* InfoMessage::mutable_loglevel_() {
  ::x3::LogLevel* _msg = _internal_mutable_loglevel_();
  // @@protoc_insertion_point(field_mutable:x3.InfoMessage.loglevel_)
  return _msg;
}
inline void InfoMessage::set_allocated_loglevel_(::x3::LogLevel* loglevel_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete loglevel__;
  }
  if (loglevel_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(loglevel_);
    if (message_arena != submessage_arena) {
      loglevel_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loglevel_, submessage_arena);
    }
    
  } else {
    
  }
  loglevel__ = loglevel_;
  // @@protoc_insertion_point(field_set_allocated:x3.InfoMessage.loglevel_)
}

// .x3.Response response_ = 4;
inline bool InfoMessage::_internal_has_response_() const {
  return this != internal_default_instance() && response__ != nullptr;
}
inline bool InfoMessage::has_response_() const {
  return _internal_has_response_();
}
inline void InfoMessage::clear_response_() {
  if (GetArenaForAllocation() == nullptr && response__ != nullptr) {
    delete response__;
  }
  response__ = nullptr;
}
inline const ::x3::Response& InfoMessage::_internal_response_() const {
  const ::x3::Response* p = response__;
  return p != nullptr ? *p : reinterpret_cast<const ::x3::Response&>(
      ::x3::_Response_default_instance_);
}
inline const ::x3::Response& InfoMessage::response_() const {
  // @@protoc_insertion_point(field_get:x3.InfoMessage.response_)
  return _internal_response_();
}
inline void InfoMessage::unsafe_arena_set_allocated_response_(
    ::x3::Response* response_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response__);
  }
  response__ = response_;
  if (response_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:x3.InfoMessage.response_)
}
inline ::x3::Response* InfoMessage::release_response_() {
  
  ::x3::Response* temp = response__;
  response__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::x3::Response* InfoMessage::unsafe_arena_release_response_() {
  // @@protoc_insertion_point(field_release:x3.InfoMessage.response_)
  
  ::x3::Response* temp = response__;
  response__ = nullptr;
  return temp;
}
inline ::x3::Response* InfoMessage::_internal_mutable_response_() {
  
  if (response__ == nullptr) {
    auto* p = CreateMaybeMessage<::x3::Response>(GetArenaForAllocation());
    response__ = p;
  }
  return response__;
}
inline ::x3::Response* InfoMessage::mutable_response_() {
  ::x3::Response* _msg = _internal_mutable_response_();
  // @@protoc_insertion_point(field_mutable:x3.InfoMessage.response_)
  return _msg;
}
inline void InfoMessage::set_allocated_response_(::x3::Response* response_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response__;
  }
  if (response_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response_);
    if (message_arena != submessage_arena) {
      response_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_, submessage_arena);
    }
    
  } else {
    
  }
  response__ = response_;
  // @@protoc_insertion_point(field_set_allocated:x3.InfoMessage.response_)
}

// repeated .x3.Config config_ = 5;
inline int InfoMessage::_internal_config__size() const {
  return config__.size();
}
inline int InfoMessage::config__size() const {
  return _internal_config__size();
}
inline void InfoMessage::clear_config_() {
  config__.Clear();
}
inline ::x3::Config* InfoMessage::mutable_config_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.InfoMessage.config_)
  return config__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Config >*
InfoMessage::mutable_config_() {
  // @@protoc_insertion_point(field_mutable_list:x3.InfoMessage.config_)
  return &config__;
}
inline const ::x3::Config& InfoMessage::_internal_config_(int index) const {
  return config__.Get(index);
}
inline const ::x3::Config& InfoMessage::config_(int index) const {
  // @@protoc_insertion_point(field_get:x3.InfoMessage.config_)
  return _internal_config_(index);
}
inline ::x3::Config* InfoMessage::_internal_add_config_() {
  return config__.Add();
}
inline ::x3::Config* InfoMessage::add_config_() {
  ::x3::Config* _add = _internal_add_config_();
  // @@protoc_insertion_point(field_add:x3.InfoMessage.config_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Config >&
InfoMessage::config_() const {
  // @@protoc_insertion_point(field_list:x3.InfoMessage.config_)
  return config__;
}

// repeated .x3.Version version_ = 6;
inline int InfoMessage::_internal_version__size() const {
  return version__.size();
}
inline int InfoMessage::version__size() const {
  return _internal_version__size();
}
inline void InfoMessage::clear_version_() {
  version__.Clear();
}
inline ::x3::Version* InfoMessage::mutable_version_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.InfoMessage.version_)
  return version__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Version >*
InfoMessage::mutable_version_() {
  // @@protoc_insertion_point(field_mutable_list:x3.InfoMessage.version_)
  return &version__;
}
inline const ::x3::Version& InfoMessage::_internal_version_(int index) const {
  return version__.Get(index);
}
inline const ::x3::Version& InfoMessage::version_(int index) const {
  // @@protoc_insertion_point(field_get:x3.InfoMessage.version_)
  return _internal_version_(index);
}
inline ::x3::Version* InfoMessage::_internal_add_version_() {
  return version__.Add();
}
inline ::x3::Version* InfoMessage::add_version_() {
  ::x3::Version* _add = _internal_add_version_();
  // @@protoc_insertion_point(field_add:x3.InfoMessage.version_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Version >&
InfoMessage::version_() const {
  // @@protoc_insertion_point(field_list:x3.InfoMessage.version_)
  return version__;
}

// repeated .x3.Capability capability_ = 7;
inline int InfoMessage::_internal_capability__size() const {
  return capability__.size();
}
inline int InfoMessage::capability__size() const {
  return _internal_capability__size();
}
inline void InfoMessage::clear_capability_() {
  capability__.Clear();
}
inline ::x3::Capability* InfoMessage::mutable_capability_(int index) {
  // @@protoc_insertion_point(field_mutable:x3.InfoMessage.capability_)
  return capability__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Capability >*
InfoMessage::mutable_capability_() {
  // @@protoc_insertion_point(field_mutable_list:x3.InfoMessage.capability_)
  return &capability__;
}
inline const ::x3::Capability& InfoMessage::_internal_capability_(int index) const {
  return capability__.Get(index);
}
inline const ::x3::Capability& InfoMessage::capability_(int index) const {
  // @@protoc_insertion_point(field_get:x3.InfoMessage.capability_)
  return _internal_capability_(index);
}
inline ::x3::Capability* InfoMessage::_internal_add_capability_() {
  return capability__.Add();
}
inline ::x3::Capability* InfoMessage::add_capability_() {
  ::x3::Capability* _add = _internal_add_capability_();
  // @@protoc_insertion_point(field_add:x3.InfoMessage.capability_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x3::Capability >&
InfoMessage::capability_() const {
  // @@protoc_insertion_point(field_list:x3.InfoMessage.capability_)
  return capability__;
}

// -------------------------------------------------------------------

// Frame

// uint64 sequence_id_ = 1;
inline void Frame::clear_sequence_id_() {
  sequence_id__ = uint64_t{0u};
}
inline uint64_t Frame::_internal_sequence_id_() const {
  return sequence_id__;
}
inline uint64_t Frame::sequence_id_() const {
  // @@protoc_insertion_point(field_get:x3.Frame.sequence_id_)
  return _internal_sequence_id_();
}
inline void Frame::_internal_set_sequence_id_(uint64_t value) {
  
  sequence_id__ = value;
}
inline void Frame::set_sequence_id_(uint64_t value) {
  _internal_set_sequence_id_(value);
  // @@protoc_insertion_point(field_set:x3.Frame.sequence_id_)
}

// uint64 timestamp_ = 2;
inline void Frame::clear_timestamp_() {
  timestamp__ = uint64_t{0u};
}
inline uint64_t Frame::_internal_timestamp_() const {
  return timestamp__;
}
inline uint64_t Frame::timestamp_() const {
  // @@protoc_insertion_point(field_get:x3.Frame.timestamp_)
  return _internal_timestamp_();
}
inline void Frame::_internal_set_timestamp_(uint64_t value) {
  
  timestamp__ = value;
}
inline void Frame::set_timestamp_(uint64_t value) {
  _internal_set_timestamp_(value);
  // @@protoc_insertion_point(field_set:x3.Frame.timestamp_)
}

// .x3.Frame.FrameType frame_type_ = 3;
inline void Frame::clear_frame_type_() {
  frame_type__ = 0;
}
inline ::x3::Frame_FrameType Frame::_internal_frame_type_() const {
  return static_cast< ::x3::Frame_FrameType >(frame_type__);
}
inline ::x3::Frame_FrameType Frame::frame_type_() const {
  // @@protoc_insertion_point(field_get:x3.Frame.frame_type_)
  return _internal_frame_type_();
}
inline void Frame::_internal_set_frame_type_(::x3::Frame_FrameType value) {
  
  frame_type__ = value;
}
inline void Frame::set_frame_type_(::x3::Frame_FrameType value) {
  _internal_set_frame_type_(value);
  // @@protoc_insertion_point(field_set:x3.Frame.frame_type_)
}

// -------------------------------------------------------------------

// Check

// repeated bytes md5sum = 1;
inline int Check::_internal_md5sum_size() const {
  return md5sum_.size();
}
inline int Check::md5sum_size() const {
  return _internal_md5sum_size();
}
inline void Check::clear_md5sum() {
  md5sum_.Clear();
}
inline std::string* Check::add_md5sum() {
  std::string* _s = _internal_add_md5sum();
  // @@protoc_insertion_point(field_add_mutable:x3.Check.md5sum)
  return _s;
}
inline const std::string& Check::_internal_md5sum(int index) const {
  return md5sum_.Get(index);
}
inline const std::string& Check::md5sum(int index) const {
  // @@protoc_insertion_point(field_get:x3.Check.md5sum)
  return _internal_md5sum(index);
}
inline std::string* Check::mutable_md5sum(int index) {
  // @@protoc_insertion_point(field_mutable:x3.Check.md5sum)
  return md5sum_.Mutable(index);
}
inline void Check::set_md5sum(int index, const std::string& value) {
  md5sum_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:x3.Check.md5sum)
}
inline void Check::set_md5sum(int index, std::string&& value) {
  md5sum_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:x3.Check.md5sum)
}
inline void Check::set_md5sum(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  md5sum_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:x3.Check.md5sum)
}
inline void Check::set_md5sum(int index, const void* value, size_t size) {
  md5sum_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:x3.Check.md5sum)
}
inline std::string* Check::_internal_add_md5sum() {
  return md5sum_.Add();
}
inline void Check::add_md5sum(const std::string& value) {
  md5sum_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:x3.Check.md5sum)
}
inline void Check::add_md5sum(std::string&& value) {
  md5sum_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:x3.Check.md5sum)
}
inline void Check::add_md5sum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  md5sum_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:x3.Check.md5sum)
}
inline void Check::add_md5sum(const void* value, size_t size) {
  md5sum_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:x3.Check.md5sum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Check::md5sum() const {
  // @@protoc_insertion_point(field_list:x3.Check.md5sum)
  return md5sum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Check::mutable_md5sum() {
  // @@protoc_insertion_point(field_mutable_list:x3.Check.md5sum)
  return &md5sum_;
}

// -------------------------------------------------------------------

// Addition

// .x3.Check check_ = 1;
inline bool Addition::_internal_has_check_() const {
  return this != internal_default_instance() && check__ != nullptr;
}
inline bool Addition::has_check_() const {
  return _internal_has_check_();
}
inline void Addition::clear_check_() {
  if (GetArenaForAllocation() == nullptr && check__ != nullptr) {
    delete check__;
  }
  check__ = nullptr;
}
inline const ::x3::Check& Addition::_internal_check_() const {
  const ::x3::Check* p = check__;
  return p != nullptr ? *p : reinterpret_cast<const ::x3::Check&>(
      ::x3::_Check_default_instance_);
}
inline const ::x3::Check& Addition::check_() const {
  // @@protoc_insertion_point(field_get:x3.Addition.check_)
  return _internal_check_();
}
inline void Addition::unsafe_arena_set_allocated_check_(
    ::x3::Check* check_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(check__);
  }
  check__ = check_;
  if (check_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:x3.Addition.check_)
}
inline ::x3::Check* Addition::release_check_() {
  
  ::x3::Check* temp = check__;
  check__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::x3::Check* Addition::unsafe_arena_release_check_() {
  // @@protoc_insertion_point(field_release:x3.Addition.check_)
  
  ::x3::Check* temp = check__;
  check__ = nullptr;
  return temp;
}
inline ::x3::Check* Addition::_internal_mutable_check_() {
  
  if (check__ == nullptr) {
    auto* p = CreateMaybeMessage<::x3::Check>(GetArenaForAllocation());
    check__ = p;
  }
  return check__;
}
inline ::x3::Check* Addition::mutable_check_() {
  ::x3::Check* _msg = _internal_mutable_check_();
  // @@protoc_insertion_point(field_mutable:x3.Addition.check_)
  return _msg;
}
inline void Addition::set_allocated_check_(::x3::Check* check_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete check__;
  }
  if (check_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(check_);
    if (message_arena != submessage_arena) {
      check_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_, submessage_arena);
    }
    
  } else {
    
  }
  check__ = check_;
  // @@protoc_insertion_point(field_set_allocated:x3.Addition.check_)
}

// .x3.Frame frame_ = 2;
inline bool Addition::_internal_has_frame_() const {
  return this != internal_default_instance() && frame__ != nullptr;
}
inline bool Addition::has_frame_() const {
  return _internal_has_frame_();
}
inline void Addition::clear_frame_() {
  if (GetArenaForAllocation() == nullptr && frame__ != nullptr) {
    delete frame__;
  }
  frame__ = nullptr;
}
inline const ::x3::Frame& Addition::_internal_frame_() const {
  const ::x3::Frame* p = frame__;
  return p != nullptr ? *p : reinterpret_cast<const ::x3::Frame&>(
      ::x3::_Frame_default_instance_);
}
inline const ::x3::Frame& Addition::frame_() const {
  // @@protoc_insertion_point(field_get:x3.Addition.frame_)
  return _internal_frame_();
}
inline void Addition::unsafe_arena_set_allocated_frame_(
    ::x3::Frame* frame_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame__);
  }
  frame__ = frame_;
  if (frame_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:x3.Addition.frame_)
}
inline ::x3::Frame* Addition::release_frame_() {
  
  ::x3::Frame* temp = frame__;
  frame__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::x3::Frame* Addition::unsafe_arena_release_frame_() {
  // @@protoc_insertion_point(field_release:x3.Addition.frame_)
  
  ::x3::Frame* temp = frame__;
  frame__ = nullptr;
  return temp;
}
inline ::x3::Frame* Addition::_internal_mutable_frame_() {
  
  if (frame__ == nullptr) {
    auto* p = CreateMaybeMessage<::x3::Frame>(GetArenaForAllocation());
    frame__ = p;
  }
  return frame__;
}
inline ::x3::Frame* Addition::mutable_frame_() {
  ::x3::Frame* _msg = _internal_mutable_frame_();
  // @@protoc_insertion_point(field_mutable:x3.Addition.frame_)
  return _msg;
}
inline void Addition::set_allocated_frame_(::x3::Frame* frame_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete frame__;
  }
  if (frame_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(frame_);
    if (message_arena != submessage_arena) {
      frame_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_, submessage_arena);
    }
    
  } else {
    
  }
  frame__ = frame_;
  // @@protoc_insertion_point(field_set_allocated:x3.Addition.frame_)
}

// -------------------------------------------------------------------

// MessagePack

// .x3.MessagePack.Flow flow_ = 1;
inline void MessagePack::clear_flow_() {
  flow__ = 0;
}
inline ::x3::MessagePack_Flow MessagePack::_internal_flow_() const {
  return static_cast< ::x3::MessagePack_Flow >(flow__);
}
inline ::x3::MessagePack_Flow MessagePack::flow_() const {
  // @@protoc_insertion_point(field_get:x3.MessagePack.flow_)
  return _internal_flow_();
}
inline void MessagePack::_internal_set_flow_(::x3::MessagePack_Flow value) {
  
  flow__ = value;
}
inline void MessagePack::set_flow_(::x3::MessagePack_Flow value) {
  _internal_set_flow_(value);
  // @@protoc_insertion_point(field_set:x3.MessagePack.flow_)
}

// .x3.MessagePack.Type type_ = 2;
inline void MessagePack::clear_type_() {
  type__ = 0;
}
inline ::x3::MessagePack_Type MessagePack::_internal_type_() const {
  return static_cast< ::x3::MessagePack_Type >(type__);
}
inline ::x3::MessagePack_Type MessagePack::type_() const {
  // @@protoc_insertion_point(field_get:x3.MessagePack.type_)
  return _internal_type_();
}
inline void MessagePack::_internal_set_type_(::x3::MessagePack_Type value) {
  
  type__ = value;
}
inline void MessagePack::set_type_(::x3::MessagePack_Type value) {
  _internal_set_type_(value);
  // @@protoc_insertion_point(field_set:x3.MessagePack.type_)
}

// .x3.Addition addition_ = 3;
inline bool MessagePack::_internal_has_addition_() const {
  return this != internal_default_instance() && addition__ != nullptr;
}
inline bool MessagePack::has_addition_() const {
  return _internal_has_addition_();
}
inline void MessagePack::clear_addition_() {
  if (GetArenaForAllocation() == nullptr && addition__ != nullptr) {
    delete addition__;
  }
  addition__ = nullptr;
}
inline const ::x3::Addition& MessagePack::_internal_addition_() const {
  const ::x3::Addition* p = addition__;
  return p != nullptr ? *p : reinterpret_cast<const ::x3::Addition&>(
      ::x3::_Addition_default_instance_);
}
inline const ::x3::Addition& MessagePack::addition_() const {
  // @@protoc_insertion_point(field_get:x3.MessagePack.addition_)
  return _internal_addition_();
}
inline void MessagePack::unsafe_arena_set_allocated_addition_(
    ::x3::Addition* addition_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addition__);
  }
  addition__ = addition_;
  if (addition_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:x3.MessagePack.addition_)
}
inline ::x3::Addition* MessagePack::release_addition_() {
  
  ::x3::Addition* temp = addition__;
  addition__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::x3::Addition* MessagePack::unsafe_arena_release_addition_() {
  // @@protoc_insertion_point(field_release:x3.MessagePack.addition_)
  
  ::x3::Addition* temp = addition__;
  addition__ = nullptr;
  return temp;
}
inline ::x3::Addition* MessagePack::_internal_mutable_addition_() {
  
  if (addition__ == nullptr) {
    auto* p = CreateMaybeMessage<::x3::Addition>(GetArenaForAllocation());
    addition__ = p;
  }
  return addition__;
}
inline ::x3::Addition* MessagePack::mutable_addition_() {
  ::x3::Addition* _msg = _internal_mutable_addition_();
  // @@protoc_insertion_point(field_mutable:x3.MessagePack.addition_)
  return _msg;
}
inline void MessagePack::set_allocated_addition_(::x3::Addition* addition_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete addition__;
  }
  if (addition_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(addition_);
    if (message_arena != submessage_arena) {
      addition_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addition_, submessage_arena);
    }
    
  } else {
    
  }
  addition__ = addition_;
  // @@protoc_insertion_point(field_set_allocated:x3.MessagePack.addition_)
}

// bytes content_ = 4;
inline void MessagePack::clear_content_() {
  content__.ClearToEmpty();
}
inline const std::string& MessagePack::content_() const {
  // @@protoc_insertion_point(field_get:x3.MessagePack.content_)
  return _internal_content_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessagePack::set_content_(ArgT0&& arg0, ArgT... args) {
 
 content__.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:x3.MessagePack.content_)
}
inline std::string* MessagePack::mutable_content_() {
  std::string* _s = _internal_mutable_content_();
  // @@protoc_insertion_point(field_mutable:x3.MessagePack.content_)
  return _s;
}
inline const std::string& MessagePack::_internal_content_() const {
  return content__.Get();
}
inline void MessagePack::_internal_set_content_(const std::string& value) {
  
  content__.Set(value, GetArenaForAllocation());
}
inline std::string* MessagePack::_internal_mutable_content_() {
  
  return content__.Mutable(GetArenaForAllocation());
}
inline std::string* MessagePack::release_content_() {
  // @@protoc_insertion_point(field_release:x3.MessagePack.content_)
  return content__.Release();
}
inline void MessagePack::set_allocated_content_(std::string* content_) {
  if (content_ != nullptr) {
    
  } else {
    
  }
  content__.SetAllocated(content_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content__.IsDefault()) {
    content__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:x3.MessagePack.content_)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace x3

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::x3::Status_RunStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::x3::Command_Order> : ::std::true_type {};
template <> struct is_proto_enum< ::x3::Response_Ack> : ::std::true_type {};
template <> struct is_proto_enum< ::x3::LogLevel_Level> : ::std::true_type {};
template <> struct is_proto_enum< ::x3::Frame_FrameType> : ::std::true_type {};
template <> struct is_proto_enum< ::x3::MessagePack_Flow> : ::std::true_type {};
template <> struct is_proto_enum< ::x3::MessagePack_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_x3_2eproto
